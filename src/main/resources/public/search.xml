<?xml version="1.0" encoding="utf-8"?>
<search> 

    <entry>
      <title>Nginx入门</title>
      <link href="/2020/07/03/nginx/nginx-xue-xi-bi-ji/"/>
      <url>/2020/07/03/nginx/nginx-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/krislinzhao/StudyNotes/blob/master/Nginx/01-Nginx%E7%AE%80%E4%BB%8B.md" target="_blank" rel="noopener">https://github.com/krislinzhao/StudyNotes/blob/master/Nginx/01-Nginx%E7%AE%80%E4%BB%8B.md</a></p><h1 id="1、什么是Nginx"><a href="#1、什么是Nginx" class="headerlink" title="1、什么是Nginx"></a>1、什么是Nginx</h1><p>Nginx (“engine x”) 是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP代理服务器特点是占有内存少，并发能力强。。</p><p>Nginx是一款轻量级的Web服务器/反向代理服务器以及电子邮件代理服务器，并在一个BSD-like协议下发行。由俄罗斯的程序设计师lgor Sysoev所开发，供俄国大型的入口网站及搜索引擎Rambler使用。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。</p><p>Nginx相较于Apache\lighttpd具有占有内存少，稳定性高等优势，并且依靠并发能力强，丰富的模块库以及友好灵活的配置而闻名。在Linux操作系统下，nginx使用epoll事件模型,得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于Epoll的高效事件模型kqueue.</p><h1 id="2、正向代理和反向代理"><a href="#2、正向代理和反向代理" class="headerlink" title="2、正向代理和反向代理"></a>2、正向代理和反向代理</h1><h2 id="2-1-正向代理"><a href="#2-1-正向代理" class="headerlink" title="2.1 正向代理"></a>2.1 正向代理</h2><p>　　我们常说的代理也就是只正向代理，正向代理是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理</p><img src="https://image.wangmx.cn/images/Nginx/00001.jpg"><h2 id="2-2-反向代理"><a href="#2-2-反向代理" class="headerlink" title="2.2 反向代理"></a>2.2 反向代理</h2><p>　　反向代理客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器 IP 地址。</p><img src="https://image.wangmx.cn/images/Nginx/00002.jpg"><h2 id="2-3-正向代理和反向代理的区别"><a href="#2-3-正向代理和反向代理的区别" class="headerlink" title="2.3 正向代理和反向代理的区别"></a>2.3 正向代理和反向代理的区别</h2><p>两者的区别在于代理的对象不一样：正向代理代理的对象是客户端，正向代理隐藏真实客户端，服务端不知道实际发起请求的客户端。反向代理代理的对象是服务端，反向代理隐藏真实服务端，客户端不知道实际提供服务的服务端</p><h1 id="3、Nginx安装"><a href="#3、Nginx安装" class="headerlink" title="3、Nginx安装"></a>3、Nginx安装</h1><h2 id="3-1-Linux安装Nginx"><a href="#3-1-Linux安装Nginx" class="headerlink" title="3.1 Linux安装Nginx"></a>3.1 Linux安装Nginx</h2><h3 id="（1）安装nginx相关依赖"><a href="#（1）安装nginx相关依赖" class="headerlink" title="（1）安装nginx相关依赖"></a>（1）安装nginx相关依赖</h3><p>安装命令：</p><pre class=" language-shell"><code class="language-shell">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel pcre-devel</code></pre><p>所需依赖的作用：</p><ul><li>gcc、gcc-c++  # 主要用来进行编译相关使用，安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境</li><li>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</li><li>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。</li><li>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库</li></ul><p>（2）创建nginx目录，并进入目录</p><pre class=" language-shell"><code class="language-shell">mkdir /usr/local/nginxcd /usr/local/nginx</code></pre><h3 id="（3）下载并解压nginx"><a href="#（3）下载并解压nginx" class="headerlink" title="（3）下载并解压nginx"></a>（3）下载并解压nginx</h3><pre class=" language-shell"><code class="language-shell">wget https://nginx.org/download/nginx-1.14.2.tar.gz tar -zxvf nginx-1.14.2.tar.gz   </code></pre><h3 id="（4）进入安装包目录"><a href="#（4）进入安装包目录" class="headerlink" title="（4）进入安装包目录"></a>（4）进入安装包目录</h3><pre class=" language-shell"><code class="language-shell">cd nginx-1.14.2</code></pre><h3 id="（5）编译安装nginx，默认安装到-usr-local-nginx中"><a href="#（5）编译安装nginx，默认安装到-usr-local-nginx中" class="headerlink" title="（5）编译安装nginx，默认安装到 /usr/local/nginx中"></a>（5）编译安装nginx，默认安装到 /usr/local/nginx中</h3><pre class=" language-shell"><code class="language-shell">./configuremake && make install</code></pre><p>至此，Nginx安装成功</p><h2 id="3-2-启动Nginx并访问"><a href="#3-2-启动Nginx并访问" class="headerlink" title="3.2 启动Nginx并访问"></a>3.2 启动Nginx并访问</h2><h3 id="（1）启动Nginx"><a href="#（1）启动Nginx" class="headerlink" title="（1）启动Nginx"></a>（1）启动Nginx</h3><pre class=" language-shell"><code class="language-shell">cd /usr/local/nginx/sbin./nginx   # 启动命令</code></pre><h3 id="（2）查看nginx进程"><a href="#（2）查看nginx进程" class="headerlink" title="（2）查看nginx进程"></a>（2）查看nginx进程</h3><pre class=" language-shell"><code class="language-shell">ps -ef | grep nginx</code></pre>{% qnimg Nginx/00001.jpg %}<h3 id="（3）访问Nginx"><a href="#（3）访问Nginx" class="headerlink" title="（3）访问Nginx"></a>（3）访问Nginx</h3><p>输入ip地址，可以访问到下图所示页面<br><img src="https://img-blog.csdnimg.cn/20200703101610268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="4、Nginx常用命令和配置文件"><a href="#4、Nginx常用命令和配置文件" class="headerlink" title="4、Nginx常用命令和配置文件"></a>4、Nginx常用命令和配置文件</h1><h2 id="4-1-Nginx常用命令"><a href="#4-1-Nginx常用命令" class="headerlink" title="4.1 Nginx常用命令"></a>4.1 Nginx常用命令</h2><p>以下所有命令，都要在/usr/local/nginx/sbin目录下执行</p><h3 id="（1）启动命令"><a href="#（1）启动命令" class="headerlink" title="（1）启动命令"></a>（1）启动命令</h3><pre class=" language-shell"><code class="language-shell">./nginx  </code></pre><h3 id="（2）停止命令"><a href="#（2）停止命令" class="headerlink" title="（2）停止命令"></a>（2）停止命令</h3><pre class=" language-shell"><code class="language-shell">./nginx -s stop # 快速停止命令，不管有没有正在处理的请求./nginx -s quit # 正常停止命令，在退出前完成已经接受的连接请求。</code></pre><h3 id="（3）重启命令"><a href="#（3）重启命令" class="headerlink" title="（3）重启命令"></a>（3）重启命令</h3><pre class=" language-shell"><code class="language-shell">./nginx -s reload</code></pre><h3 id="（4）查看版本"><a href="#（4）查看版本" class="headerlink" title="（4）查看版本"></a>（4）查看版本</h3><pre class=" language-shell"><code class="language-shell">./nginx -v</code></pre><h3 id="（5）查看-Nginx-配置语法的正确性"><a href="#（5）查看-Nginx-配置语法的正确性" class="headerlink" title="（5）查看 Nginx 配置语法的正确性"></a>（5）查看 Nginx 配置语法的正确性</h3><pre class=" language-shell"><code class="language-shell">./nginx -v</code></pre><h2 id="4-2-配置文件"><a href="#4-2-配置文件" class="headerlink" title="4.2 配置文件"></a>4.2 配置文件</h2><p>nginx 安装目录下，其默认的配置文件都放在这个目录的 conf 目录下，而主配置文件nginx.conf 也在其中，后续对 nginx 的使用基本上都是对此配置文件进行相应的修改。</p>{% qnimg Nginx/000004.png %}<p>根据上图，我们可以很明显的将 nginx.conf 配置文件分为三部分：</p><h3 id="（1）全局块"><a href="#（1）全局块" class="headerlink" title="（1）全局块"></a>（1）全局块</h3><p>从配置文件开始到 events 块之间的内容，主要会设置一些影响 nginx 服务器整体运行的配置指令，主要包括配置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以及配置文件的引入等。<br>比如图中的</p><pre><code>worker_processes   1</code></pre><p>这是 Nginx 服务器并发处理服务的关键配置，worker_processes 值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约</p><h3 id="（2）events-块"><a href="#（2）events-块" class="headerlink" title="（2）events 块"></a>（2）events 块</h3><p>events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。</p><pre><code>worker_connections  1024;</code></pre><p>上述例子就表示每个 work process 支持的最大连接数为 1024. 这部分的配置对 Nginx 的性能影响较大，在实际中应该灵活配置。</p><h3 id="（3）http-块"><a href="#（3）http-块" class="headerlink" title="（3）http 块"></a>（3）http 块</h3><p>这算是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。</p><p>需要注意的是：http块也可以包括http全局块和server块。</p><h4 id="1）-http-全局块"><a href="#1）-http-全局块" class="headerlink" title="1） http 全局块"></a>1） http 全局块</h4><p>http 全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。</p><h4 id="2）-http-server块"><a href="#2）-http-server块" class="headerlink" title="2） http server块"></a>2） http server块</h4><p>这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。每个http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。而每个 server 块也分为全局server块，以及可以同时包含多个locaton块。</p><p><strong>① 全局server块</strong><br>最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。<br><strong>② location块</strong><br>一个 server 块可以配置多个 location 块。<br>这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称（也可以是 IP 别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。</p><h3 id="详细配置文件介绍"><a href="#详细配置文件介绍" class="headerlink" title="详细配置文件介绍"></a>详细配置文件介绍</h3><pre class=" language-conf"><code class="language-conf">#定义Nginx运行的用户和用户组user www www; #nginx进程数，通常设置成和cpu的数量相等worker_processes 4; #全局错误日志定义类型，[debug | info | notice | warn | error | crit]#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;#进程pid文件#pid        logs/nginx.pid;#指定进程可以打开的最大描述符：数目#工作模式与连接数上限##这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。worker_rlimit_nofile 65535;events {    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。    #补充说明：    #与apache相类，nginx针对不同的操作系统，有不同的事件模型    #A）标准事件模型    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll    #B）高效事件模型    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。    #Epoll：使用于Linux内核2.6版本及以后的系统。    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。    use epoll    #单个进程最大连接数（最大连接数=连接数+进程数）    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cup跑到100%就行。    worker_connections  1024;    #keepalive 超时时间    keepalive_timeout 60;    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。    #分页大小可以用命令getconf PAGESIZE 取得。    #[root@web001 ~]# getconf PAGESIZE    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。    client_header_buffer_size 4k;    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。    open_file_cache max=65535 inactive=60s;    #这个是指多长时间检查一次缓存的有效信息。    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.    open_file_cache_valid 80s;    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.    open_file_cache_min_uses 1;    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.    open_file_cache_errors on;}#设定http服务器，利用它的反向代理功能提供负载均衡支持http{    #文件扩展名与文件类型映射表    include mime.types;    #默认文件类型    default_type application/octet-stream;    #默认编码    charset utf-8;    #服务器名字的hash表大小    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.    server_names_hash_bucket_size 128;    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。    client_header_buffer_size 32k;    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。    large_client_header_buffers 4 64k;    #设定通过nginx上传文件的大小    client_max_body_size 8m;    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。    sendfile on;     #开启目录列表访问，合适下载服务器，默认关闭。    autoindex on;      #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用    tcp_nopush on;    tcp_nodelay on;    #长连接超时时间，单位是秒    keepalive_timeout 120;    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。    fastcgi_connect_timeout 300;    fastcgi_send_timeout 300;    fastcgi_read_timeout 300;    fastcgi_buffer_size 64k;    fastcgi_buffers 4 64k;    fastcgi_busy_buffers_size 128k;    fastcgi_temp_file_write_size 128k;    #gzip模块设置    gzip on; #开启gzip压缩输出    gzip_min_length 1k;    #最小压缩文件大小    gzip_buffers 4 16k;    #压缩缓冲区    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）    gzip_comp_level 2;     #压缩等级    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。    gzip_vary on;    #开启限制IP连接数的时候需要使用    #limit_zone crawler $binary_remote_addr 10m;    #负载均衡配置    upstream piao.jd.com {        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。        server 192.168.80.121:80 weight=3;        server 192.168.80.122:80 weight=2;        server 192.168.80.123:80 weight=3;        #nginx的upstream目前支持4种方式的分配        #1、轮询（默认）        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。        #2、weight        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。        #例如：        #upstream bakend {        #    server 192.168.0.14 weight=10;        #    server 192.168.0.15 weight=10;        #}        #2、ip_hash        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。        #例如：        #upstream bakend {        #    ip_hash;        #    server 192.168.0.14:88;        #    server 192.168.0.15:80;        #}        #3、fair（第三方）        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。        #upstream backend {        #    server server1;        #    server server2;        #    fair;        #}        #4、url_hash（第三方）        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法        #upstream backend {        #    server squid1:3128;        #    server squid2:3128;        #    hash $request_uri;        #    hash_method crc32;        #}        #tips:        #upstream bakend        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;        #每个设备的状态设置为:        #1.down表示单前的server暂时不参与负载        #2.weight为weight越大，负载的权重就越大。        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误        #4.fail_timeout:max_fails次失败后，暂停的时间。        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡    }    #虚拟主机的配置    server {        #监听端口        listen 80;        #域名可以有多个，用空格隔开        server_name www.jd.com jd.com;        #默认入口文件名称        index index.html index.htm index.php;        root /data/www/jd;        #对******进行负载均衡        location ~ .*.(php|php5)?$        {            fastcgi_pass 127.0.0.1:9000;            fastcgi_index index.php;            include fastcgi.conf;        }        #图片缓存时间设置        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$        {            expires 10d;        }        #JS和CSS缓存时间设置        location ~ .*.(js|css)?$        {            expires 1h;        }        #日志格式设定        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；        #$remote_user：用来记录客户端用户名称；        #$time_local： 用来记录访问时间与时区；        #$request： 用来记录请求的url与http协议；        #$status： 用来记录请求状态；成功是200，        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；        #$http_referer：用来记录从那个页面链接访问过来的；        #$http_user_agent：记录客户浏览器的相关信息；        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。        log_format access '$remote_addr - $remote_user [$time_local] "$request" '        '$status $body_bytes_sent "$http_referer" '        '"$http_user_agent" $http_x_forwarded_for';        #定义本虚拟主机的访问日志        access_log  /usr/local/nginx/logs/host.access.log  main;        access_log  /usr/local/nginx/logs/host.access.404.log  log404;        #对 "/connect-controller" 启用反向代理        location /connect-controller {            proxy_pass http://127.0.0.1:88; #请注意此处端口号不能与虚拟主机监听的端口号一样（也就是server监听的端口）            proxy_redirect off;            proxy_set_header X-Real-IP $remote_addr;            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            #以下是一些反向代理的配置，可选。            proxy_set_header Host $host;            #允许客户端请求的最大单文件字节数            client_max_body_size 10m;            #缓冲区代理缓冲用户端请求的最大字节数，            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误            client_body_buffer_size 128k;            #表示使nginx阻止HTTP应答代码为400或者更高的应答。            proxy_intercept_errors on;            #后端服务器连接的超时时间_发起握手等候响应超时时间            #nginx跟后端服务器连接超时时间(代理连接超时)            proxy_connect_timeout 90;            #后端服务器数据回传时间(代理发送超时)            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据            proxy_send_timeout 90;            #连接成功后，后端服务器响应时间(代理接收超时)            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）            proxy_read_timeout 90;            #设置代理服务器（nginx）保存用户头信息的缓冲区大小            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小            proxy_buffer_size 4k;            #proxy_buffers缓冲区，网页平均在32k以下的设置            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k            proxy_buffers 4 32k;            #高负荷下缓冲大小（proxy_buffers*2）            proxy_busy_buffers_size 64k;            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长            #设定缓存文件夹大小，大于这个值，将从upstream服务器传            proxy_temp_file_write_size 64k;        }        #本地动静分离反向代理配置        #所有jsp的页面均交由tomcat或resin处理        location ~ .(jsp|jspx|do)?$ {            proxy_set_header Host $host;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_pass http://127.0.0.1:8080;        }    }}</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Nginx 配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置）。</p><p>main 部分设置的指令影响其他所有部分的设置；</p><p>server 部分的指令主要用于制定虚拟主机域名、IP 和端口号；</p><p>upstream 的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；</p><p>location 部分用于匹配网页位置（比如，根目录“/”，“/images”，等等）。</p><p>他们之间的关系：server 继承 main，location 继承 server；upstream 既不会继承指令也不会被继承。</p><h1 id="5、Nginx配置实例-反向代理"><a href="#5、Nginx配置实例-反向代理" class="headerlink" title="5、Nginx配置实例-反向代理"></a>5、Nginx配置实例-反向代理</h1><h2 id="5-1-反向代理实例一"><a href="#5-1-反向代理实例一" class="headerlink" title="5.1 反向代理实例一"></a>5.1 反向代理实例一</h2><h3 id="（1）实现效果"><a href="#（1）实现效果" class="headerlink" title="（1）实现效果"></a>（1）实现效果</h3><p>使用 nginx 反向代理，访问nginx地址直接跳转到Tomcat服务器</p><blockquote><p>访问 ip 192.168.31.202 直接跳转到Tomcat 192.168.31.202:8080</p></blockquote><h3 id="（2）实现过程"><a href="#（2）实现过程" class="headerlink" title="（2）实现过程"></a>（2）实现过程</h3><p>1.在Linx下安装并启动Tomcat服务器，访问Tomcat服务器<br><img src="https://img-blog.csdnimg.cn/20200703221126739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt=""></p><p>2.配置Nginx反向代理，通过Nginx访问Tomcat服务器<br><img src="https://img-blog.csdnimg.cn/20200703221958786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt=""><br>3.修改配置文件，通过访问Nginx监听的80端口，访问到Tomcat服务器的8080端口<br><img src="https://img-blog.csdnimg.cn/20200703222203503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="5-2-反向代理实例一"><a href="#5-2-反向代理实例一" class="headerlink" title="5.2 反向代理实例一"></a>5.2 反向代理实例一</h2><h3 id="（1）实现效果-1"><a href="#（1）实现效果-1" class="headerlink" title="（1）实现效果"></a>（1）实现效果</h3><p>使用nginx反向代理，根据访问的路径跳转到不同端口的服务中</p><blockquote><p>访问 <a href="http://192.168.31.202:9001/edu/index.html" target="_blank" rel="noopener">http://192.168.31.202:9001/edu/index.html</a> 直接跳转到 192.168.31.202:8081/edu/index.html<br>访问 <a href="http://192.168.31.202:9001/vod/index.html" target="_blank" rel="noopener">http://192.168.31.202:9001/vod/index.html</a> 直接跳转到 192.168.31.202:8082/edu/index.html</p></blockquote><h3 id="（2）实现过程-1"><a href="#（2）实现过程-1" class="headerlink" title="（2）实现过程"></a>（2）实现过程</h3><p>1.在Tomcat的webapps目录下新增edu文件夹，添加index.html文件，内容如下</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>8080<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200703222804206.png" alt=""></p><p>2.重新启动一个Tomcat，端口为8081，并在webapps目录下新增vod文件夹，同样添加index.html</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>8081<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200703222758402.png" alt=""></p><p>3.修改 nginx 的配置文件，新增一个server，实现访问<a href="http://192.168.31.202:9001/edu/" target="_blank" rel="noopener">http://192.168.31.202:9001/edu/</a>  直接跳转到8080服务，访问 <a href="http://192.168.31.202:9001/vod/" target="_blank" rel="noopener">http://192.168.31.202:9001/vod/</a> 直接跳转到8081服务</p><pre class=" language-conf"><code class="language-conf">    server {          listen       80;          server_name  192.168.31.202;          location ~ /edu/ {              proxy_pass  http://192.168.31.202:8080;          }          location ~ /vod/ {              proxy_pass  http://192.168.31.202:8081;          }      }</code></pre><p>4.访问9001端口</p><p><img src="https://img-blog.csdnimg.cn/20200703223501830.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20200703223425541.png" alt=""></p><h2 id="5-3-location指令说明："><a href="#5-3-location指令说明：" class="headerlink" title="5.3 location指令说明："></a>5.3 location指令说明：</h2><p>该指令用于匹配 URL。语法如下：</p><p>1、= ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求。</p><p>2、~：用于表示 uri 包含正则表达式，并且区分大小写。</p><p>3、~*：用于表示 uri 包含正则表达式，并且不区分大小写。</p><p>4、^~：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配。</p><p><strong>注意</strong>：如果 uri 包含正则表达式，则必须要有 ~ 或者 ~* 标识。</p><h1 id="6、Nginx配置实例-负载均衡"><a href="#6、Nginx配置实例-负载均衡" class="headerlink" title="6、Nginx配置实例-负载均衡"></a>6、Nginx配置实例-负载均衡</h1><h2 id="6-1-负载均衡"><a href="#6-1-负载均衡" class="headerlink" title="6.1 负载均衡"></a>6.1 负载均衡</h2><p>客户端发送多个请求到服务器，服务器处理请求，有一些可能要与数据库进行交互，服务器处理完毕后，再将结果返回给客户端。</p><p>这种架构模式对于早期的系统相对单一，并发请求相对较少的情况下是比较适合的，成本也低。但是随着信息数量的不断增长，访问量和数据量的飞速增长，以及系统业务的复杂度增加，这种架构会造成服务器相应客户端的请求日益缓慢，并发量特别大的时候，还容易造成服务器直接崩溃。很明显这是由于服务器性能的瓶颈造成的问题，那么如何解决这种情况呢？</p><p>我们首先想到的可能是升级服务器的配置，比如提高 CPU 执行频率，加大内存等提高机器的物理性能来解决此问题，但是我们知道摩尔定律的日益失效，硬件的性能提升已经不能满足日益提升的需求了。最明显的一个例子，天猫双十一当天，某个热销商品的瞬时访问量是极其庞大的，那么类似上面的系统架构，将机器都增加到现有的顶级物理配置，都是不能够满足需求的。那么怎么办呢？</p><p>上面的分析我们去掉了增加服务器物理配置来解决问题的办法，也就是说纵向解决问题的办法行不通了，那么横向增加服务器的数量呢？这时候集群的概念产生了，单个服务器解决不了，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡<br><img src="https://img-blog.csdnimg.cn/20200706220045249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="6-2-Nginx配置负载均衡"><a href="#6-2-Nginx配置负载均衡" class="headerlink" title="6.2 Nginx配置负载均衡"></a>6.2 Nginx配置负载均衡</h2><p>部署两台Tomcat服务器，通过Nginx实现负载均衡，将访问平均到两台服务器上。</p><p>（1）部署服务器</p><p><img src="https://img-blog.csdnimg.cn/2020070420591942.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20200704205945446.png" alt=""></p><p>（2）修改配置文件</p><pre class=" language-conf"><code class="language-conf">    upstream myservers{        server 192.168.31.202:8080;        server 192.168.31.202:8081;    }    server {        listen       80;        server_name  192.168.31.202;        location / {            proxy_pass    http://myservers;            root   html;            index  index.html index.htm;        }        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;        }    }</code></pre><h2 id="6-3-Nginx分配服务器策略"><a href="#6-3-Nginx分配服务器策略" class="headerlink" title="6.3 Nginx分配服务器策略"></a>6.3 Nginx分配服务器策略</h2><p>第一种 轮询（默认）</p><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除。</p><pre class=" language-conf"><code class="language-conf">upstream backserver {     server 192.168.31.202:8080;     server 192.168.31.202:8081; } </code></pre><p>第二种 weight<br>weight的值越大分配到的访问概率越高，主要用于后端每台服务器性能不均衡的情况下。其次是为在主从的情况下设置不同的权值，达到合理有效的地利用主机资源。<br>权重越高，在被访问的概率越大，如下例，分别是20%，80%。</p><pre class=" language-conf"><code class="language-conf">upstream backserver {     server 192.168.31.202:8080  weight=8;     server 192.168.31.202:8081  weight=2; } </code></pre><p>第三种 ip_hash</p><p>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，==并且可以有效解决动态网页存在的session共享问题==</p><pre class=" language-conf"><code class="language-conf">upstream backserver {     ip_hash;     server 192.168.31.202:8080;     server 192.168.31.202:8081; } </code></pre><p>第四种 fair（(第三方插件)）</p><ul><li><p>必须安装upstream_fair模块。</p></li><li><p>对比 weight、ip_hash更加智能的负载均衡算法，fair算法可以根据页面大小和加载时间长短智能地进行负载均衡，响应时间短的优先分配。哪个服务器的响应速度快，就将请求分配到那个服务器上。</p><pre class=" language-conf"><code class="language-conf">  upstream backserver {       server 192.168.31.202:8080;       server 192.168.31.202:8081;       fair;   } </code></pre></li></ul><h1 id="7、-Nginx配置实例-动静分离"><a href="#7、-Nginx配置实例-动静分离" class="headerlink" title="7、 Nginx配置实例-动静分离"></a>7、 Nginx配置实例-动静分离</h1><h2 id="7-1-动静分离"><a href="#7-1-动静分离" class="headerlink" title="7.1 动静分离"></a>7.1 动静分离</h2><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。<br><img src="https://img-blog.csdnimg.cn/20200704212243623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="7-2-动静分离配置"><a href="#7-2-动静分离配置" class="headerlink" title="7.2 动静分离配置"></a>7.2 动静分离配置</h2><p>通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体 expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件，不建议使用 expires 来缓存），我这里设置 3d，表示在这 3 天之内访问这个 URL，发送一个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码 304，如果有修改，则直接从服务器重新下载，返回状态码 200。</p><p>在Linux data目录下放置静态资源<br><img src="https://img-blog.csdnimg.cn/20200704213722173.png" alt=""></p><p>修改配置文件<br><img src="https://img-blog.csdnimg.cn/20200704214717163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt=""></p><pre><code>server {    listen       80;    server_name  192.168.31.202;    location / {        proxy_pass    http://myservers;        root   html;        index  index.html index.htm;    }    location /www/ {        root   /data/;        expires 3d;        index  index.html index.htm;    }    location /images/ {        root   /data/;        index  index.html index.htm;        autoindex    on;        expires 3h;    }    error_page   500 502 503 504  /50x.html;    location = /50x.html {        root   html;    }}</code></pre><p>访问静态资源，如果设置autoindex on可以展示静态资源列表<br><img src="https://img-blog.csdnimg.cn/20200704214818297.png" alt="v"><br><img src="https://img-blog.csdnimg.cn/20200704215216347.png" alt=""><br>设置<code>autoindex  on</code>可以访问静态资源路径展示列表，如图一所示</p><h1 id="8、Nginx高可用集群"><a href="#8、Nginx高可用集群" class="headerlink" title="8、Nginx高可用集群"></a>8、Nginx高可用集群</h1><h2 id="8-1-Keepalived-Nginx-高可用集群（主从模式）"><a href="#8-1-Keepalived-Nginx-高可用集群（主从模式）" class="headerlink" title="8.1 Keepalived+Nginx 高可用集群（主从模式）"></a>8.1 Keepalived+Nginx 高可用集群（主从模式）</h2><p><img src="https://img-blog.csdnimg.cn/20200704222334774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="8-2-配置高可用集群"><a href="#8-2-配置高可用集群" class="headerlink" title="8.2 配置高可用集群"></a>8.2 配置高可用集群</h2><h3 id="（1）部署两台-nginx-服务器，并安装keepalived"><a href="#（1）部署两台-nginx-服务器，并安装keepalived" class="headerlink" title="（1）部署两台 nginx 服务器，并安装keepalived"></a>（1）部署两台 nginx 服务器，并安装keepalived</h3><p>安装keepalived</p><pre class=" language-shell"><code class="language-shell">yum install keepalived –y</code></pre><h3 id="（2）安装之后，在-etc-里面生成目录-keepalived，有文件-keepalived-conf"><a href="#（2）安装之后，在-etc-里面生成目录-keepalived，有文件-keepalived-conf" class="headerlink" title="（2）安装之后，在 etc 里面生成目录 keepalived，有文件 keepalived.conf"></a>（2）安装之后，在 etc 里面生成目录 keepalived，有文件 keepalived.conf</h3><p><img src="https://img-blog.csdnimg.cn/20200704222848610.png" alt=""></p><h3 id="（3）修改-etc-keepalived-keepalivec-conf-配置文件"><a href="#（3）修改-etc-keepalived-keepalivec-conf-配置文件" class="headerlink" title="（3）修改/etc/keepalived/keepalivec.conf 配置文件"></a>（3）修改/etc/keepalived/keepalivec.conf 配置文件</h3><pre class=" language-json"><code class="language-json">global_defs <span class="token punctuation">{</span>   notification_email <span class="token punctuation">{</span>     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   <span class="token punctuation">}</span>   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server <span class="token number">192.168</span>.<span class="token number">31.202</span>   smtp_connect_timeout <span class="token number">30</span>   router_id LVS_DEVEL   vrrp_skip_check_adv_addr   vrrp_strict   vrrp_garp_interval <span class="token number">0</span>   vrrp_gna_interval <span class="token number">0</span><span class="token punctuation">}</span>vrrp_script chk_http_port <span class="token punctuation">{</span>    script <span class="token string">"/usr/local/src/nginx_check.sh"</span> #检测脚本    interval <span class="token number">2</span>  #（检测脚本执行的间隔）    weight <span class="token number">2</span><span class="token punctuation">}</span>vrrp_instance VI_1 <span class="token punctuation">{</span>    state MASTER         #备份服务器上改为BACKUP    interface enp7s0     #网卡    virtual_router_id <span class="token number">51</span> #主机备机的virtual_router_id必须相同    priority <span class="token number">100</span>         #主机备机去不同的优先级，主机优先级较大    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">{</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">}</span>    virtual_ipaddress <span class="token punctuation">{</span>        <span class="token number">192.168</span>.<span class="token number">17.50</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="（4）在-usr-local-src-添加检测脚本nginx-check-sh"><a href="#（4）在-usr-local-src-添加检测脚本nginx-check-sh" class="headerlink" title="（4）在/usr/local/src 添加检测脚本nginx_check.sh"></a>（4）在/usr/local/src 添加检测脚本nginx_check.sh</h3><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>A<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> -C nginx –no-header <span class="token operator">|</span><span class="token function">wc</span> -l<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$A</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">then</span> /usr/local/nginx/sbin/nginx    <span class="token function">sleep</span> 2    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> -C nginx --no-header <span class="token operator">|</span><span class="token function">wc</span> -l<span class="token variable">`</span></span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">then</span> <span class="token function">killall</span> keepalived    <span class="token keyword">fi</span><span class="token keyword">fi</span></code></pre><h3 id="（5）把两台服务器上-nginx-和-keepalived-启动"><a href="#（5）把两台服务器上-nginx-和-keepalived-启动" class="headerlink" title="（5）把两台服务器上 nginx 和 keepalived 启动"></a>（5）把两台服务器上 nginx 和 keepalived 启动</h3><p>启动 nginx：</p><pre><code>./nginx</code></pre><p>启动 keepalived：</p><pre><code>systemctl start keepalived.service</code></pre><h3 id="（6）最终测试"><a href="#（6）最终测试" class="headerlink" title="（6）最终测试"></a>（6）最终测试</h3><p>在浏览器地址栏输入虚拟地址ip 192.168.17.50<br>把主服务器nginx和keepalived停止，再次输入192.168.17.50</p><h2 id="Nginx原理解析"><a href="#Nginx原理解析" class="headerlink" title="Nginx原理解析"></a>Nginx原理解析</h2><p>1、master和worker<br><img src="https://img-blog.csdnimg.cn/20200706155224454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt=""></p><p>2、worker如何进行工作的<br><img src="https://img-blog.csdnimg.cn/20200706155234294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt=""></p><p>3、一个master和多个woker的好处<br>(1) 可以使用nginx -s reload热部署。</p><p>首先，对于每个worker进程来说，独立的进程，不需要加锁，所以省掉了锁带来的开销，同时在编程以及问题查找时，也会方便很多。其次,采用独立的进程，可以让互相之间不会影响，一个进程退出后，其它进程还在工作，服务不会中断，master进程则很快启动新的worker进程。当然，worker进程的异常退出，肯定是程序有bug了，异常退出，会导致当前worker.上的所有请求失败，不过不会影响到所有请求，所以降低了风险。</p><p>4、设置多少个woker合适</p><p>Nginx同redis类似都采用了io多路复用机制，每个worker都是一个独立的进程， 但每个进<br>程里只有一个主线程，通过异步非阻塞的方式来处理请求，即使是 千上万个请求也不在话<br>下。每个worker的线程可以把一个cpu的性能发挥到极致。所以worker数和服务器的cpu<br>数相等是最为适宜的。设少了会浪费cpu,设多了会造成cpu频繁切换上下文带来的损耗。</p><p>设置worker数量</p><pre class=" language-shell"><code class="language-shell">worker.processes 4 # work绑定cpu(4work绑定4cpu)worker_cpu_affinity 0001 0010 0100 1000# work绑定cpu (4work绑定8cpu中的4个)worker_cpu_affinity 00000001 00000010 00000100 00001000</code></pre><p>5、连接数worker_ connection<br>这个值是表示每个worker进程所能建立连接的最大值，所以，一个nginx 能建立的最大连接数，应该是worker.connections * worker processes。当然，这里说的是最大连接数，对于HTTP 请求本地资源来说，能够支持的最大并发数量是worker.connections * worker processes,如果是支持http1.1的浏览器每次访问要占两个连接，所以普通的静态访问最大并发数是: worker.connections * worker.processes / 2, 而如果是HTTP作为反向代理来说，最大并发数量应该是worker.connections * worker_proceses/4. 因为作为反向代理服务器，每个并发会建立与客户端的连接和与后端服务的连接，会占用两个连接.<br>第一个: 发送请求，占用了woker的几个连接数?<br>答案: 2或者4个。</p><p>第二个: nginx有一个master,有四个woker,每个woker支持最大的连接数1024,支持的最大并发数是多少?<br>答案：普通的静态访问最大并发数是: worker connections * worker processes /2，<br>而如果是HTTP作为反向代理来说，最大并发数量应该是worker connections * worker processes/4</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 负载均衡 </tag>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门：（六）Dockerfile</title>
      <link href="/2020/06/26/docker/docker-ru-men-liu-dockerfile/"/>
      <url>/2020/06/26/docker/docker-ru-men-liu-dockerfile/</url>
      
        <content type="html"><![CDATA[<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><h3 id="什么是Dockerfile"><a href="#什么是Dockerfile" class="headerlink" title="什么是Dockerfile"></a>什么是Dockerfile</h3><p>Dockerfile是用来构建Docker镜像的构建文件，是由一系列参数构成的脚本<br>使用命令build来创建新的image，默认是当前目录下名为Dockerfile的文件，可以使用<code>-f 路径</code>来指定具体位置的文件 <code>-t 名称:target</code> 指定镜像名称和版本</p><pre class=" language-java"><code class="language-java">  docker build <span class="token operator">-</span>f <span class="token operator">/</span>dockerfiles<span class="token operator">/</span>Dockerfile <span class="token operator">-</span>t mycentos<span class="token operator">:</span><span class="token number">1.0</span> <span class="token punctuation">.</span></code></pre><h3 id="Dockerfile语法规则"><a href="#Dockerfile语法规则" class="headerlink" title="Dockerfile语法规则"></a>Dockerfile语法规则</h3><ol><li>每条保留字指令都必须是大写，且后面要跟随至少一个参数</li><li>指令按照从上到下顺序执行</li><li>#表示注释</li><li>每条指令都会创建一个新的镜像，并进行提交</li></ol><h3 id="Dockerfile保留字指令"><a href="#Dockerfile保留字指令" class="headerlink" title="Dockerfile保留字指令"></a>Dockerfile保留字指令</h3><ul><li>FROM：基础镜像，当前新镜像是基于哪个镜像，如果不以任何镜像为基础，那么写法为：FROM scratch。</li><li>MAINTAINER：镜像维护者的姓名和邮箱</li><li>RUN：容器构建的时候需要的命令</li><li>EXPOSE：当前容器对外暴露出的端口号</li><li>WORKDIR：指定在创建容器后，终端默认登录的进来工作目录，一个落脚点（创建容器后，进入容器终端的目录，不指定默认是根目录）</li><li>ENV：用来在构建镜像的过程中设置环境变量</li><li>ADD：将宿主机目录下的文件拷贝进镜像，且ADD命令会自动处理URL或者解压tar压缩包</li><li>COPY：将从构建上下文的目录中&lt;源路径&gt;的文件/目录复制到新的一层镜像内的&lt;目标路径&gt;位置</li><li>VOLUME：容器数据券，用于数据保存和持久化工作</li><li>CMD：指定一个容器启动时要执行的命令<br>DockerFile中可以有多个CMD命令，但只有最后一个生效，CMD会被docker run之后的参数替换</li><li>ENTRYPOINT：指定一个容器启动时要执行的命令<br>目的和CMD一样，都是在指定容器启动程序及参数，不同的是docker run之后的参数是在ENTRYPOINT之后追加</li><li>ONBUILD：当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后，父镜像的onbuild被触发</li></ul><h2 id="Dockerfile构建案例"><a href="#Dockerfile构建案例" class="headerlink" title="Dockerfile构建案例"></a>Dockerfile构建案例</h2><h3 id="自定义centos"><a href="#自定义centos" class="headerlink" title="自定义centos"></a>自定义centos</h3><p><img src="https://img-blog.csdnimg.cn/20200331181557662.png" alt="在这里插入图片描述"><br>需求：我们运行官方的centos之后，默认的路径是根目录，且不支持vim命令和ifconfig命令，我们可以使用Dockerfile自定义一个centos镜像，默认路径是/usr/local，且支持vim命令和ifconfig命令</p><p>Dockerfile编写</p><pre class=" language-java"><code class="language-java">FROM centosMAINTAINER wmx<span class="token operator">&lt;</span><span class="token number">1130</span><span class="token annotation punctuation">@qq</span><span class="token punctuation">.</span>com<span class="token operator">></span>#定义环境变量ENV MYPATH <span class="token operator">/</span>usr<span class="token operator">/</span>local#定义默认的工作目录WORKDIR $MYPATH#运行命令 安装vim和net<span class="token operator">-</span>toolsRUN yum <span class="token operator">-</span>y install vimRUN yum <span class="token operator">-</span>y install net<span class="token operator">-</span>tools#对外暴露的端口号EXPOSE <span class="token number">80</span>CMD echo $MYPATHCMD echo <span class="token string">"my centos run sunccess ......"</span>CMD <span class="token operator">/</span>bin<span class="token operator">/</span>bash</code></pre><p>使用build命令创建镜像</p><pre class=" language-java"><code class="language-java">docker build <span class="token operator">-</span>t mycentos<span class="token operator">:</span><span class="token number">1.0</span> <span class="token punctuation">.</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020033118430819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>mycentos镜像创建成功，运行mycentos</p><pre class=" language-java"><code class="language-java">docker run <span class="token operator">-</span>it mycentos<span class="token operator">:</span><span class="token number">1.0</span> <span class="token punctuation">.</span></code></pre><p>默认目录在/usr/local，并且可以使用vim和ifconfig命令<br><img src="https://img-blog.csdnimg.cn/20200331184555751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="CMD和ENTRYPOINT"><a href="#CMD和ENTRYPOINT" class="headerlink" title="CMD和ENTRYPOINT"></a>CMD和ENTRYPOINT</h3><p>我们从上面保留字介绍中可以知道，DockerFile中可以有多个CMD命令，但只有最后一个生效，CMD会被docker run之后的参数替换，我们来进行一下测试</p><p>我们使用Tomcat做一下测试，Tomcat的Dockerfile中最后一行命令</p><pre class=" language-java"><code class="language-java">CMD <span class="token punctuation">[</span><span class="token string">"catalina.sh"</span><span class="token punctuation">,</span> <span class="token string">"run"</span><span class="token punctuation">]</span></code></pre><p>我们启动Tomcat时，最后执行了Tomcat的启动命令，所以当我们运行Tomcat容器后，可以直接访问Tomcat<br><img src="https://img-blog.csdnimg.cn/20200331215644583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200331215721401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但是如果我们在启动Tomcat容器时，加上其他命令，就会导致启动Tomcat命令被覆盖而失效<br>如下，比如我们加上ls -l命令，命令正确执行，列出了Tomcat目录下的文件，但是访问Tomcat发现无法访问，Tomcat被没有成功的启动<br><img src="https://img-blog.csdnimg.cn/20200331215852468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200331220059954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="自定义Tomcat"><a href="#自定义Tomcat" class="headerlink" title="自定义Tomcat"></a>自定义Tomcat</h3><p>创建Dockerfile文件</p><pre class=" language-java"><code class="language-java">FROM centosMAINTAINER wangmx<span class="token operator">&lt;</span><span class="token number">1130</span><span class="token annotation punctuation">@qq</span><span class="token punctuation">.</span>com<span class="token operator">></span>#把宿主机当前上下文的c<span class="token punctuation">.</span>txt拷贝到容器<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>路径下COPY c<span class="token punctuation">.</span>txt <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>cincontainer<span class="token punctuation">.</span>txt#把java与tomcat添加到容器中ADD jdk<span class="token operator">-</span>8u241<span class="token operator">-</span>linux<span class="token operator">-</span>x64<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>ADD apache<span class="token operator">-</span>tomcat<span class="token operator">-</span><span class="token number">8.5</span><span class="token punctuation">.</span><span class="token number">53</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span># 安装vim编辑器RUN yum <span class="token operator">-</span>y install vim# 设置工作访问时候的WORKDIR路径，登录落脚点ENV MYPATH <span class="token operator">/</span>usr<span class="token operator">/</span>localWORKDIR $MYPATH#配置java和tomcat环境变量ENV JAVA_HOME <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_241ENV CLASSPATH $JAVA_HOME<span class="token operator">/</span>lib<span class="token operator">/</span>dt<span class="token punctuation">,</span>jar<span class="token operator">:</span>$JAVA_HOME<span class="token operator">/</span>lib<span class="token operator">/</span>tools<span class="token punctuation">.</span>jarENV CATALINA_HOME <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>apache<span class="token operator">-</span>tomcat<span class="token operator">-</span><span class="token number">9.0</span><span class="token punctuation">.</span><span class="token number">33</span>ENV CATALINA_BASE <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>apache<span class="token operator">-</span>tomcat<span class="token operator">-</span><span class="token number">9.0</span><span class="token punctuation">.</span><span class="token number">33</span>ENV PATH $PATH<span class="token operator">:</span>$JAVA_HOME<span class="token operator">/</span>bin<span class="token operator">:</span>$CATALINA_HOME<span class="token operator">/</span>lib<span class="token operator">:</span>CATALINA_HOME<span class="token operator">/</span>bin#容器运行时监听的端口EXPOSE <span class="token number">8080</span>#启东时运行TomcatCMD <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>apache<span class="token operator">-</span>tomcat<span class="token operator">-</span><span class="token number">9.0</span><span class="token punctuation">.</span><span class="token number">33</span><span class="token operator">/</span>bin<span class="token operator">/</span>startup<span class="token punctuation">.</span>sh <span class="token operator">&amp;&amp;</span> tail <span class="token operator">-</span>F <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>apache<span class="token operator">-</span>tomcat<span class="token operator">-</span><span class="token number">9.0</span><span class="token punctuation">.</span><span class="token number">33</span><span class="token operator">/</span>bin<span class="token operator">/</span>logs<span class="token operator">/</span>catalina<span class="token punctuation">.</span>out</code></pre><p><img src="https://img-blog.csdnimg.cn/20200405103905887.png" alt="在这里插入图片描述"><br>准备好这几个文件,使用build命令，创建镜像</p><pre><code>docker build -t mytomcat .</code></pre><p><img src="https://img-blog.csdnimg.cn/2020040420194693.png" alt="在这里插入图片描述"><br>运行自定义tomcat镜像</p><pre class=" language-java"><code class="language-java">docker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">8090</span><span class="token operator">:</span><span class="token number">8080</span> <span class="token operator">--</span>name mytomcat \<span class="token operator">-</span>v <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>docker<span class="token operator">/</span>tomcat9<span class="token operator">/</span>webapps<span class="token operator">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>apache<span class="token operator">-</span>tomcat<span class="token operator">-</span><span class="token number">9.0</span><span class="token punctuation">.</span><span class="token number">33</span><span class="token operator">/</span>webapps \<span class="token operator">-</span>v <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>docker<span class="token operator">/</span>tomcat9<span class="token operator">/</span>logs<span class="token operator">/</span><span class="token operator">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>apache<span class="token operator">-</span>tomcat<span class="token operator">-</span><span class="token number">9.0</span><span class="token punctuation">.</span><span class="token number">33</span><span class="token operator">/</span>logs \<span class="token operator">--</span>privileged<span class="token operator">=</span><span class="token boolean">true</span> \mytomcat</code></pre><p>在/usr/local/docker/tomcat9/webapps目录下创建ROOT文件夹，在ROOT中创建index.jsp<br>重启tomcat</p><pre class=" language-java"><code class="language-java">docker restart mytomcat</code></pre><p><img src="https://img-blog.csdnimg.cn/20200405111235780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>访问成功</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Dockerfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门：（九）Docker可视化工具</title>
      <link href="/2020/06/26/docker/docker-ru-men-jiu-docker-ke-shi-hua-gong-ju/"/>
      <url>/2020/06/26/docker/docker-ru-men-jiu-docker-ke-shi-hua-gong-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="常用工具介绍"><a href="#常用工具介绍" class="headerlink" title="常用工具介绍"></a>常用工具介绍</h2><p>当Docker部署规模住键变大后，可视化监控容器环境得性能和健康状态将会变得越来越重要。Docker的图形化管理工具、提供状态显示面板、应用模板快速部署、容器镜像网络数据卷的基本操作（包括上传下载镜像、创建容器等操作）、事件日志、容器控制台操作、Swarm集群和服务等集中管理和操作、登录用户管理和控制等功能。<br>常用工具：</p><ol><li>docker UI</li><li>shipyard（停止维护）</li><li>portainer</li><li>daocloud(收费)</li></ol><h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><h4 id="docker-UI"><a href="#docker-UI" class="headerlink" title="docker UI"></a>docker UI</h4><ol><li><p>拉取Docker UI镜像</p><pre class=" language-java"><code class="language-java"> docker pull uifd<span class="token operator">/</span>ui<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">-</span>docker</code></pre></li><li><p>创建容器</p><pre class=" language-java"><code class="language-java"> docker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">9000</span><span class="token operator">:</span><span class="token number">9000</span> <span class="token operator">--</span>privileged \ <span class="token operator">-</span>v <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>docker<span class="token punctuation">.</span>sock<span class="token operator">:</span><span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>docker<span class="token punctuation">.</span>sock \ uifd<span class="token operator">/</span>ui<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">-</span>docker</code></pre><p> <img src="https://img-blog.csdnimg.cn/20200405130525633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="portainer使用"><a href="#portainer使用" class="headerlink" title="portainer使用"></a>portainer使用</h4></li><li><p>拉取镜像</p><pre class=" language-java"><code class="language-java"> docker pull portainer<span class="token operator">/</span>portainer</code></pre></li><li><p>创建容器</p><pre class=" language-java"><code class="language-java"> docker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">9001</span><span class="token operator">:</span><span class="token number">9000</span> \ <span class="token operator">-</span>v <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>docker<span class="token punctuation">.</span>sock<span class="token operator">:</span><span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>docker<span class="token punctuation">.</span>sock \ portainer<span class="token operator">/</span>portainer</code></pre><p> portainer需要设置密码,相对比docker UI安全<br><img src="https://img-blog.csdnimg.cn/20200405130916793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> 进入之后，如果是本地，选取本地<br> <img src="https://img-blog.csdnimg.cn/2020040513103832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <img src="https://img-blog.csdnimg.cn/20200405131108272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门：（八）本地镜像发布到阿里云</title>
      <link href="/2020/06/26/docker/docker-ru-men-ba-ben-di-jing-xiang-fa-bu-dao-a-li-yun/"/>
      <url>/2020/06/26/docker/docker-ru-men-ba-ben-di-jing-xiang-fa-bu-dao-a-li-yun/</url>
      
        <content type="html"><![CDATA[<h2 id="创建阿里云仓库"><a href="#创建阿里云仓库" class="headerlink" title="创建阿里云仓库"></a>创建阿里云仓库</h2><p><img src="https://img-blog.csdnimg.cn/20200405114553431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200405114615829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200405114724859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200405114730452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200405114859773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200405114924936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="阿里云操作指南"><a href="#阿里云操作指南" class="headerlink" title="阿里云操作指南"></a>阿里云操作指南</h2><ol><li><p>登录阿里云Docker Registry</p><pre class=" language-java"><code class="language-java"> $ sudo docker login <span class="token operator">--</span>username<span class="token operator">=</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> registry<span class="token punctuation">.</span>cn<span class="token operator">-</span>hangzhou<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>com</code></pre><p> 用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。</p><p> 您可以在访问凭证页面修改凭证密码。</p></li><li><p>从Registry中拉取镜像</p><pre class=" language-java"><code class="language-java"> $ sudo docker pull registry<span class="token punctuation">.</span>cn<span class="token operator">-</span>hangzhou<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>com<span class="token operator">/</span>wangmx_s<span class="token operator">/</span>wangmx<span class="token operator">:</span><span class="token punctuation">[</span>镜像版本号<span class="token punctuation">]</span></code></pre></li><li><p>将镜像推送到Registry</p><pre class=" language-java"><code class="language-java"> $ sudo docker login <span class="token operator">--</span>username<span class="token operator">=</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> registry<span class="token punctuation">.</span>cn<span class="token operator">-</span>hangzhou<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>com $ sudo docker tag <span class="token punctuation">[</span>ImageId<span class="token punctuation">]</span> registry<span class="token punctuation">.</span>cn<span class="token operator">-</span>hangzhou<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>com<span class="token operator">/</span>wangmx_s<span class="token operator">/</span>wangmx<span class="token operator">:</span><span class="token punctuation">[</span>镜像版本号<span class="token punctuation">]</span> $ sudo docker push registry<span class="token punctuation">.</span>cn<span class="token operator">-</span>hangzhou<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>com<span class="token operator">/</span>wangmx_s<span class="token operator">/</span>wangmx<span class="token operator">:</span><span class="token punctuation">[</span>镜像版本号<span class="token punctuation">]</span></code></pre><p> 请根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。</p></li><li><p>选择合适的镜像仓库地址<br>从ECS推送镜像时，可以选择使用镜像仓库内网地址。推送速度将得到提升并且将不会损耗您的公网流量。</p><p> 如果您使用的机器位于VPC网络，请使用 registry-vpc.cn-hangzhou.aliyuncs.com 作为Registry的域名登录，并作为镜像命名空间前缀。</p></li></ol><h2 id="将本地镜像上传阿里云"><a href="#将本地镜像上传阿里云" class="headerlink" title="将本地镜像上传阿里云"></a>将本地镜像上传阿里云</h2><p>我们以自定义得centos为例<br><img src="https://img-blog.csdnimg.cn/20200405120542810.png" alt="在这里插入图片描述"></p><h4 id="commit获得一个新的版本镜像"><a href="#commit获得一个新的版本镜像" class="headerlink" title="commit获得一个新的版本镜像"></a>commit获得一个新的版本镜像</h4><p><img src="https://img-blog.csdnimg.cn/20200405121120800.png" alt="在这里插入图片描述"><br>根据上面阿里云操作指南，将mycentos:1.0提交到阿里云<br><img src="https://img-blog.csdnimg.cn/20200405123326100.png" alt="在这里插入图片描述"><br>上传成功<br><img src="https://img-blog.csdnimg.cn/20200405123245427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>从阿里云拉去镜像到本地<br><img src="https://img-blog.csdnimg.cn/20200405123210888.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门：（七）Docker安装Mysql</title>
      <link href="/2020/06/26/docker/docker-ru-men-qi-docker-an-zhuang-mysql/"/>
      <url>/2020/06/26/docker/docker-ru-men-qi-docker-an-zhuang-mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker安装Mysql"><a href="#Docker安装Mysql" class="headerlink" title="Docker安装Mysql"></a>Docker安装Mysql</h2><ol><li>从Docker Hub拉取镜像<pre class=" language-java"><code class="language-java"> docker pull mysql</code></pre></li><li>运行容器<pre class=" language-java"><code class="language-java">     docker run <span class="token operator">-</span>p <span class="token number">3306</span><span class="token operator">:</span><span class="token number">3306</span> <span class="token operator">--</span>name mysql \     <span class="token operator">-</span>v <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>docker<span class="token operator">/</span>mysql<span class="token operator">/</span>data<span class="token operator">:</span><span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql \     <span class="token operator">-</span>v <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>docker<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token operator">/</span>my<span class="token punctuation">.</span>cnf<span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token punctuation">.</span>d \     <span class="token operator">-</span>v <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>docker<span class="token operator">/</span>mysql<span class="token operator">/</span>logs<span class="token operator">:</span><span class="token operator">/</span>logs \     <span class="token operator">-</span>e MYSQL_ROOT_PASSWORD<span class="token operator">=</span><span class="token number">123456</span> \     <span class="token operator">-</span>d mysql \     <span class="token operator">--</span>lower_case_table_names<span class="token operator">=</span><span class="token number">1</span>注：    <span class="token operator">==</span><span class="token operator">-</span>\<span class="token operator">-</span>lower_case_table_names<span class="token operator">=</span><span class="token number">1</span>表示表名忽略大小写，如果不加这个，mysql8安装后默认表名区分大小写<span class="token operator">==</span></code></pre></li></ol><p><img src="https://img-blog.csdnimg.cn/20200404171417657.png" alt="在这里插入图片描述"><br>容器运行成功</p><h2 id="Navicat连接Mysql"><a href="#Navicat连接Mysql" class="headerlink" title="Navicat连接Mysql"></a>Navicat连接Mysql</h2><p>使用Navicat连接Mysql，我们会发现连接不上，因为在mysql5.8从开始将caching_sha2_password作为默认的身份验证插件，而在MySQL 5.7中，默认的身份验证插件是 mysql_native_password！这个时候可以修改 user 表中的密码规则，回到mysql5.7的密码验证格式。<br><img src="https://img-blog.csdnimg.cn/20200404171502988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200404171706572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>root 用户的验证器插件为 caching_sha2_password</p><h4 id="修改身份验证类型-修改密码"><a href="#修改身份验证类型-修改密码" class="headerlink" title="修改身份验证类型(修改密码)"></a>修改身份验证类型(修改密码)</h4><pre><code>mysql&gt; ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;Query OK, 0 rows affected (0.35 sec)mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;Query OK, 0 rows affected (0.40 sec)</code></pre><h4 id="刷新权限"><a href="#刷新权限" class="headerlink" title="刷新权限"></a>刷新权限</h4><pre><code>mysql&gt; FLUSH PRIVILEGES;Query OK, 0 rows affected (0.05 sec)</code></pre><h4 id="查看用户的验证器是否修改"><a href="#查看用户的验证器是否修改" class="headerlink" title="查看用户的验证器是否修改"></a>查看用户的验证器是否修改</h4><p><img src="https://img-blog.csdnimg.cn/20200404191836910.png" alt="在这里插入图片描述"></p><h4 id="连接成功"><a href="#连接成功" class="headerlink" title="连接成功"></a>连接成功</h4><p><img src="https://img-blog.csdnimg.cn/20200404171939938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Docker启动时自动启动容器"><a href="#Docker启动时自动启动容器" class="headerlink" title="Docker启动时自动启动容器"></a>Docker启动时自动启动容器</h2><p>在运行docker容器时可以加如下参数来保证每次docker服务重启后容器也自动重启：</p><pre class=" language-java"><code class="language-java">docker run <span class="token operator">--</span>restart<span class="token operator">=</span>always</code></pre><p>如果已经启动了则可以使用如下命令：</p><pre class=" language-java"><code class="language-java">docker update <span class="token operator">--</span>restart<span class="token operator">=</span>always <span class="token operator">&lt;</span>CONTAINER ID<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门：（五）容器数据券</title>
      <link href="/2020/06/26/docker/docker-ru-men-wu-rong-qi-shu-ju-quan/"/>
      <url>/2020/06/26/docker/docker-ru-men-wu-rong-qi-shu-ju-quan/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Docker中的数据可以存储在类似于虚拟机磁盘的介质中，在Docker中称为数据卷（Data Volume）。数据卷可以用来存储Docker应用的数据，也可以用来在Docker容器间进行数据共享。</p><p>Docker的理念将运行的环境打包形成容器运行，运行可以伴随容器，但是我们对数据的要求是希望持久化，容器之间可以共享数据，Docker容器产生的数据，如果不通过docker commit生成新的镜像，使得数据作为容器的一部分保存下来，那么当容器被删除之后，数据也就没了，为了能够保存数据，在docker容器中使用卷。</p><p>数据卷呈现给Docker容器的形式就是一个目录，支持多个容器间共享，不属于联合文件系统，修改也不会影响镜像。使用Docker的数据卷，类似在系统中使用 mount 挂载一个文件系统。</p><p>卷的设计目的就是数据的持久化，完全独立与容器的生命周期，因此Docker不会在容器删除时删除其挂载的数据卷。<br>特点：  </p><ol><li>数据卷可以在容器之间共享和重用数据。</li><li>卷的更改可以直接生效。</li><li>数据卷的更改不会包含在镜像的更新中。</li><li>数据卷的生命周期一直持续到没有容器使用它为止。</li></ol><h2 id="容器数据券添加"><a href="#容器数据券添加" class="headerlink" title="容器数据券添加"></a>容器数据券添加</h2><h3 id="命令添加"><a href="#命令添加" class="headerlink" title="命令添加"></a>命令添加</h3><h4 id="创建数据券"><a href="#创建数据券" class="headerlink" title="创建数据券"></a>创建数据券</h4><blockquote><p>$ docker run -it -v /宿主机目录:/容器目录 镜像名</p></blockquote><p>执行命令后，在宿主机和容器创建数据券目录<br><img src="https://img-blog.csdnimg.cn/20200325204229159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用命令 <code>docker inspect 6946198b2e8c</code>查看数据券是否挂载成功<br><img src="https://img-blog.csdnimg.cn/2020032520460583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>挂载成功后，就可以实现容器和宿主机之间的数据共享，在容器内操作的数据会同步到宿主机，在宿主机操作的数据也会同步到容器<br><img src="https://img-blog.csdnimg.cn/20200325204904691.png" alt="在这里插入图片描述"></p><h4 id="数据券权限"><a href="#数据券权限" class="headerlink" title="数据券权限"></a>数据券权限</h4><blockquote><p>$ docker run -it -v /宿主机目录:/容器目录:ro 镜像名</p></blockquote><p>在容器目录后加:ro（readonly），是创建只读数据券，这样只允许宿主机单向操作数据券，而容器内不能操作数据券</p><h3 id="DockerFile添加"><a href="#DockerFile添加" class="headerlink" title="DockerFile添加"></a>DockerFile添加</h3><p>出于可移植和分享的考虑，用-v主机目录:容器目录这种方法不能够直接在Dockerfile中实现。由于宿主机目录是依赖于特定宿主机的，并不能保证在所有的宿主机上都存在这样的特定目录<br>DockerFile可以使用VOLUME指令给镜像添加一个或者多个数据券</p><h4 id="1-DockerFile的构建"><a href="#1-DockerFile的构建" class="headerlink" title="1.DockerFile的构建"></a>1.DockerFile的构建</h4><p><img src="https://img-blog.csdnimg.cn/20200326213140465.png" alt="在这里插入图片描述"><br>该DockerFile表示基于centos，创建两个数据卷，并打印“start my docker image…”，然后执行/bin/bash</p><p>该DokcerFile含义类似于==docker run -it -v /host1:/dataVolumeContainer1 -v /host2:/dataVolumeContainer2 centos /bin/bash==</p><h4 id="2-build后生成镜像"><a href="#2-build后生成镜像" class="headerlink" title="2.build后生成镜像"></a>2.build后生成镜像</h4><p>命令：docker build [OPTIONS] PATH | URL | -</p><p>Options:<br>-f 后缀dockerfile文件路径<br><img src="https://img-blog.csdnimg.cn/20200326214426852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>执行build命令，创建镜像，可以看到，控制台打印了“start my docker image…”<br>如图创建镜像成功<br><img src="https://img-blog.csdnimg.cn/20200326214520594.png" alt="在这里插入图片描述"></p><h4 id="3-使用镜像运行容器"><a href="#3-使用镜像运行容器" class="headerlink" title="3. 使用镜像运行容器"></a>3. 使用镜像运行容器</h4><p>创建镜像之后，我们就可以使用<code>docker run</code>来运行容器<br><img src="https://img-blog.csdnimg.cn/20200326214655512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行之后，查看目录，发现容器券创建成功，但是这时候有个问题，我们在命令添加数据券的时候指定了宿主机的目录，可以和容器内数据券目录共享，但是用dockerfile执行因为没有指定宿主机目录，那容器数据券如何共享呢？实际上docker给我们创建了默认的宿主机目录<br><img src="https://img-blog.csdnimg.cn/20200326215744605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>注</strong>： 如果碰到Dokcer挂载主机目录Docker访问出现cannot opendirectory ..Permission denied 在挂载目录后加上 –privileged=true参数即可</p><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p>命名的容器挂载数据卷，其他容器通过挂载这个容器（父容器）实现数据共享，挂载数据卷的容器，称之为数据卷容器<br>数据卷共享命令：–volumes-from<br>创建第一个容器，容器内创建容器数据卷，在数据卷内创建一个文件，这个容器就是数据卷容器<br><img src="https://img-blog.csdnimg.cn/20200331212533863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们以第一个容器作为父容器，创建二个容器</p><pre class=" language-java"><code class="language-java">docker run <span class="token operator">-</span>it <span class="token operator">--</span>name container02 <span class="token operator">--</span>volumes<span class="token operator">-</span>from container01 wmx<span class="token operator">/</span>centosdocker run <span class="token operator">-</span>it <span class="token operator">--</span>name container03 <span class="token operator">--</span>volumes<span class="token operator">-</span>from container01 wmx<span class="token operator">/</span>centos</code></pre><p><img src="https://img-blog.csdnimg.cn/20200331213945442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>从上图我们可以看出，我在父容器中创建的文件出现在了容器2中，容器2中创建的文件也出现在了容器3中，我们在容器3（子容器）中创建的文件，也出现在了容器1中，可见，并不是只有父容器可以向子容器共享文件，子容器中创建的文件也能共享到父容器中。而且即使我们删除父容器，因为数据已经共享到子容器，也不会影响数据<br><img src="https://img-blog.csdnimg.cn/20200331214344227.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门：（四）Dokcer常用命令</title>
      <link href="/2020/06/26/docker/docker-ru-men-si-dokcer-chang-yong-ming-ling/"/>
      <url>/2020/06/26/docker/docker-ru-men-si-dokcer-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><h3 id="查看docker版本信息"><a href="#查看docker版本信息" class="headerlink" title="查看docker版本信息"></a>查看docker版本信息</h3><p>命令：docker version</p><h3 id="查看docker运行信息"><a href="#查看docker运行信息" class="headerlink" title="查看docker运行信息"></a>查看docker运行信息</h3><p>命令：docker info</p><h3 id="帮助命令-1"><a href="#帮助命令-1" class="headerlink" title="帮助命令"></a>帮助命令</h3><p>含义: docker [Command] –help （如果不写命令，查询出所有命令信息）</p><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><h3 id="镜像列表"><a href="#镜像列表" class="headerlink" title="镜像列表"></a>镜像列表</h3><p>命令：docker images [OPTIONS] [REPOSITORY[:TAG]]<br><img src="https://img-blog.csdnimg.cn/2020031416324528.png" alt="在这里插入图片描述"></p><ul><li>REPOSITORY：表示镜像的仓库源</li><li>TAG：标签（版本）</li><li>IMAGE ID：镜像ID</li><li>CREATED：镜像创建时间</li><li>SIZE：镜像大小</li></ul><p>OPTIONS：（可以使用docker –help images查看详细内容）</p><ul><li>-a：显示所有镜像（docker默认隐藏中间镜像）</li><li>-q：只显示镜像id</li><li>--digests ：显示摘要信息</li><li>--no-trunc：不要截断输出 </li></ul><h3 id="查询镜像"><a href="#查询镜像" class="headerlink" title="查询镜像"></a>查询镜像</h3><p>命令：docker search [OPTIONS] TERM<br><img src="https://img-blog.csdnimg.cn/20200314165239531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>NAME：镜像名称</li><li>DESCRIPTION：镜像描述</li><li>STARS：星</li><li>OFFICIAL：官方版</li><li>AUTOMATED：自动构建的</li></ul><p>常用的过滤命令：<br>docker search -s 30 mysql 可以查询starts 30以上的镜像</p><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>命令：docker pull [OPTIONS] NAME[:TAG|@DIGEST] （不写版本号默认是最新的版本:latest）</p><p>OPTIONS：</p><ul><li>-a：下载存储库中所有标记的图像<ul><li>-q：不在控制台输出下载信息</li><li>--disable-content-trust   跳过图像验证(默认为true)</li></ul></li></ul><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>含义：docker rmi [OPTIONS] IMAGE [IMAGE…]</p><p>OPTIONS：</p><ul><li>-f：强制删除</li></ul><p>扩展：</p><ul><li>删除多个<br>docker rmi -f 镜像1 镜像2 …<ul><li>删除全部<br>docker rmi -f $(docker images -qa)<br>==docker images -qa 表示查询所有镜像id，将查询的id返回给rmi命令==</li></ul></li></ul><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><h3 id="新建并启动容器"><a href="#新建并启动容器" class="headerlink" title="新建并启动容器"></a>新建并启动容器</h3><p>命令：docker run [OPTIONS] IMAGE [COMMAND] [ARG…]<br>OPTIONS（常用）：</p><ul><li>-d：启动守护式容器（后台运行，并返回容器id）</li><li>-i：启动交护式容器（通常与-t同时使用）</li><li>-t：为docker分配一个伪终端工具操作容器（tty终端，通常与-i同时使用）</li><li>--name：指定容器名称（唯一）</li></ul><p>注意：docker创建守护式容器时要注意，docker有个机制，当docker容器后台运行时，必须有一个前台进行与它交互，否则，docker后台进程会自动回收<br><img src="https://img-blog.csdnimg.cn/20200314214245742.png" alt="在这里插入图片描述"><br>如上图所示，启动后台进程容器后，查看容器，却并没有，我们可以使用shell脚本，保持进程与前台仅从交互，如下图所示，这样就可以保持容器在后台进行<br><img src="https://img-blog.csdnimg.cn/20200314214702799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="容器列表"><a href="#容器列表" class="headerlink" title="容器列表"></a>容器列表</h3><p>命令： docker ps [OPTIONS]</p><p>OPTIONS（常用）：</p><ul><li>-a：列出当前所有正在运行的容器+历史上运行的容器</li><li>-l：显示最近创建的容器</li><li>-n num：显示最近n个创建的容器</li><li>-q：静默模式，只返回容器id</li><li>--no-trunc：不截断输出</li></ul><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><h4 id="退出并停止容器"><a href="#退出并停止容器" class="headerlink" title="退出并停止容器"></a>退出并停止容器</h4><p>命令：exit</p><h4 id="退出不停止容器"><a href="#退出不停止容器" class="headerlink" title="退出不停止容器"></a>退出不停止容器</h4><p>命令：Ctrl+P+Q</p><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>命令：docker start [OPTIONS] CONTAINER [CONTAINER…]<br>Options:</p><ul><li>-i：启动并进入容器</li></ul><h3 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h3><p> docker restart [OPTIONS] CONTAINER [CONTAINER…]</p><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><h4 id="停止容器-1"><a href="#停止容器-1" class="headerlink" title="停止容器"></a>停止容器</h4><p>命令：docker stop [OPTIONS] CONTAINER [CONTAINER…]<br>Options:</p><ul><li>-t num：num秒之后停止容器（默认10)</li></ul><h4 id="强制停止"><a href="#强制停止" class="headerlink" title="强制停止"></a>强制停止</h4><p>命令：docker kill [OPTIONS] CONTAINER [CONTAINER…]</p><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>命令：docker rm [OPTIONS] CONTAINER [CONTAINER…]<br>Options:</p><ul><li><p>-f：强制移除正在运行的容器</p></li><li><p>-l：删除指定的链接</p></li><li><p>-v：删除与容器关联的匿名卷</p></li></ul><p>删除所有容器 docker rm -f  $(docker ps -qa)  或者 docker ps -qa | xages docker rm</p><p>上面新建命令我们可以知道，如果我们想创建一个守护式容器，可以使用命令：</p><pre class=" language-java"><code class="language-java">$ docker run <span class="token operator">-</span>d image</code></pre><h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><p>命令：docker logs [OPTIONS] CONTAINER<br>Options:</p><ul><li>-t：显示时间</li><li>-f：跟踪日志输出（动态显示）</li><li>--details ：显示提供给日志的额外细节</li><li>--tail num：从日志末尾显示的行数</li></ul><h3 id="查看容器内运行情况"><a href="#查看容器内运行情况" class="headerlink" title="查看容器内运行情况"></a>查看容器内运行情况</h3><p>命令:  docker top CONTAINER [ps OPTIONS]</p><h3 id="查看容器内部细节"><a href="#查看容器内部细节" class="headerlink" title="查看容器内部细节"></a>查看容器内部细节</h3><p>命令：docker inspect [OPTIONS] NAME|ID [NAME|ID…]</p><p>==以Json串的形式返回容器内部细节==</p><h3 id="进入正在运行的容器进行交互"><a href="#进入正在运行的容器进行交互" class="headerlink" title="进入正在运行的容器进行交互"></a>进入正在运行的容器进行交互</h3><p>命令：docker attach [OPTIONS] CONTAINER<br>命令：docker exec [OPTIONS] CONTAINER COMMAND [ARG…]</p><p>区别：attach 直接进入容器<br><code>exec -it CONTAINER /bin/bash</code>可以直接进入容器，相当于attach<br><img src="https://img-blog.csdnimg.cn/20200314212213502.png" alt="在这里插入图片描述"><br>exec也可以不进入容器而只执行命令，相当于在容器内执行命令并将命令返回到宿主机<br><img src="https://img-blog.csdnimg.cn/20200314211927778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="从容器内拷贝文件到宿主机"><a href="#从容器内拷贝文件到宿主机" class="headerlink" title="从容器内拷贝文件到宿主机"></a>从容器内拷贝文件到宿主机</h3><p> docker cp [OPTIONS] CONTAINER:文件路径 目标路径</p><p><img src="https://img-blog.csdnimg.cn/20200314213546469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门：（三）Dokcer的安装与卸载</title>
      <link href="/2020/06/26/docker/docker-ru-men-san-dokcer-de-an-zhuang-yu-xie-zai/"/>
      <url>/2020/06/26/docker/docker-ru-men-san-dokcer-de-an-zhuang-yu-xie-zai/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h2><p>Docker 分为 CE 和 EE 两大版本。 CE 即社区版（免费，支持周期 7 个月）， EE 即企业版，强调安全，付费使用，支持周期 24 个月。</p><p>我们在安装前可以参看<a href="https://docs.docker.com/install/" target="_blank" rel="noopener">官方文档</a>获取最新的 Docker 支持情况。</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>Docker 支持以下的 64 位 CentOS 版本：</p><ul><li>CentOS 7</li><li>CentOS 8</li><li>更高版本…</li></ul><p>Docker 要求操作系统必须为64位，且centos内核版本为3.10及以上，可以使用下面命令查看</p><pre class=" language-java"><code class="language-java">uname <span class="token operator">-</span>r</code></pre><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><pre class=" language-java"><code class="language-java">sudo yum remove docker \                  docker<span class="token operator">-</span>client \                  docker<span class="token operator">-</span>client<span class="token operator">-</span>latest \                  docker<span class="token operator">-</span>common \                  docker<span class="token operator">-</span>latest \                  docker<span class="token operator">-</span>latest<span class="token operator">-</span>logrotate \                  docker<span class="token operator">-</span>logrotate \                  docker<span class="token operator">-</span>engine</code></pre><h3 id="安装-Docker-Engine-Community"><a href="#安装-Docker-Engine-Community" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h3><p>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。</p><h4 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h4><pre class=" language-java"><code class="language-java">sudo yum install <span class="token operator">-</span>y yum<span class="token operator">-</span>utils \device<span class="token operator">-</span>mapper<span class="token operator">-</span>persistent<span class="token operator">-</span>data \lvm2</code></pre><h4 id="使用以下命令来设置稳定的仓库。"><a href="#使用以下命令来设置稳定的仓库。" class="headerlink" title="使用以下命令来设置稳定的仓库。"></a>使用以下命令来设置稳定的仓库。</h4><pre class=" language-java"><code class="language-java">sudo yum<span class="token operator">-</span>config<span class="token operator">-</span>manager <span class="token operator">--</span>add<span class="token operator">-</span>repo https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token operator">/</span>linux<span class="token operator">/</span>centos<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token punctuation">.</span>repo </code></pre><p>==注：此处与官网不同，因为官方仓库在国外，国内下载很慢，所以我们可以使用阿里镜像仓库==</p><h4 id="安装docker引擎"><a href="#安装docker引擎" class="headerlink" title="安装docker引擎"></a>安装docker引擎</h4><pre class=" language-java"><code class="language-java">sudo yum install docker<span class="token operator">-</span>ce docker<span class="token operator">-</span>ce<span class="token operator">-</span>cli containerd<span class="token punctuation">.</span>io</code></pre><p>安装完成后，运行<code>docker version</code>或者<code>docker info</code>命令，验证是否安装成功，返回docker的版本相关信息，证明 docker 安装成功</p><p>设置docker开机自启</p><pre class=" language-java"><code class="language-java">systemctl enable docker</code></pre><p>启动docker</p><pre class=" language-java"><code class="language-java">systemctl start docker</code></pre><p>查看docker状态<br><img src="https://img-blog.csdnimg.cn/20200314141533917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安装时出现下面错误，更新一下<code>sudo yum update</code>,然后重新安装</p><blockquote><p>下载的软件包保存在缓存中，直到下次成功执行事务。<br>您可以通过执行 ‘dnf clean packages’ 删除软件包缓存。<br>错误：事务检查错误</p></blockquote><h2 id="Docker卸载"><a href="#Docker卸载" class="headerlink" title="Docker卸载"></a>Docker卸载</h2><h4 id="删除yum已经安装的安装包"><a href="#删除yum已经安装的安装包" class="headerlink" title="删除yum已经安装的安装包"></a>删除yum已经安装的安装包</h4><p> 搜索</p><pre class=" language-java"><code class="language-java">yum list installed <span class="token operator">|</span> grep docker</code></pre><p><img src="https://img-blog.csdnimg.cn/20200314142043300.png" alt="在这里插入图片描述"><br> 删除</p><pre class=" language-java"><code class="language-java">yum <span class="token operator">-</span>y remove docker<span class="token operator">-</span>ce<span class="token operator">-</span>cli<span class="token punctuation">.</span>x86_64\<span class="token operator">></span> yum <span class="token operator">-</span>y remove docker<span class="token operator">-</span>ce<span class="token punctuation">.</span>x86_64\<span class="token operator">></span> yum <span class="token operator">-</span>y remove containerd<span class="token punctuation">.</span>io<span class="token punctuation">.</span>x86_64</code></pre><h4 id="再删除rpm安装的安装包"><a href="#再删除rpm安装的安装包" class="headerlink" title="再删除rpm安装的安装包"></a>再删除rpm安装的安装包</h4><p> 搜索</p><pre class=" language-java"><code class="language-java">rpm <span class="token operator">-</span>qa <span class="token operator">|</span> grep docker</code></pre><p><img src="https://img-blog.csdnimg.cn/20200314143722507.png" alt="在这里插入图片描述"><br>删除</p><pre class=" language-java"><code class="language-java">rpm <span class="token operator">-</span>e docker<span class="token operator">-</span>ce<span class="token operator">-</span>cli<span class="token operator">-</span><span class="token number">19.03</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64\<span class="token operator">></span> docker<span class="token operator">-</span>ce<span class="token operator">-</span><span class="token number">19.03</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64</code></pre><h4 id="删除Docker镜像"><a href="#删除Docker镜像" class="headerlink" title="删除Docker镜像"></a>删除Docker镜像</h4><pre class=" language-java"><code class="language-java">rm <span class="token operator">-</span>rf <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>docker</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门：（一）虚拟化技术</title>
      <link href="/2020/06/26/docker/docker-ru-men-yi-xu-ni-hua-ji-zhu/"/>
      <url>/2020/06/26/docker/docker-ru-men-yi-xu-ni-hua-ji-zhu/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是虚拟化"><a href="#什么是虚拟化" class="headerlink" title="什么是虚拟化"></a>什么是虚拟化</h2><p>hello world<br>虚拟化技术即Virtualization，是指通过虚拟化技术将一台计算机虚拟为多台逻辑计算机。在一台计算机上同时运行多个逻辑计算机，每个逻辑计算机可运行不同的操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率。<br>虚拟化使用软件的方法重新定义划分IT资源，可以实现IT资源的动态分配、灵活调度、跨域共享，提高IT资源利用率，使IT资源能够真正成为社会基础设施，服务于各行各业中灵活多变的应用需求。<br>在实际生产中，虚拟化技术主要用来解决高性能的物理硬件产能过剩和老旧硬件产能过低的重组重用，透明化底层物理硬件，从而最大化的利用物理硬件<br>虚拟化技术种类有很多，例如软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化、桌面虚拟化、服务虚拟化、虚拟机等</p><h2 id="虚拟化架构"><a href="#虚拟化架构" class="headerlink" title="虚拟化架构"></a>虚拟化架构</h2><h3 id="全虚拟化"><a href="#全虚拟化" class="headerlink" title="全虚拟化"></a>全虚拟化</h3><p>客户机操作系统不宿主机操作系统的限制，虚拟机就是全虚拟化，需要模拟整台机器包括硬件，每台虚拟机都需要有自己的操作系统，虚拟机一旦被开启，预分配给它的资源将全部被占用。每一台虚拟机包括应用，必要的二进制和库，以及一个完整的用户操作系统。<br><img src="https://img-blog.csdnimg.cn/20200307215118545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="操作系统层的虚拟化"><a href="#操作系统层的虚拟化" class="headerlink" title="操作系统层的虚拟化"></a>操作系统层的虚拟化</h3><p>客户机操作系统必须要和宿主机操作系统保持一致，容器技术是实现操作系统虚拟化的一种途径，可以让您在资源受到隔离的进程中运行应用程序及其依赖关系。容器利用和共享主机内核，而不需要模拟硬件<br><img src="https://img-blog.csdnimg.cn/20200307214637449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="平台虚拟化（硬件虚拟化）"><a href="#平台虚拟化（硬件虚拟化）" class="headerlink" title="平台虚拟化（硬件虚拟化）"></a>平台虚拟化（硬件虚拟化）</h3><p>无需安装宿主机操作系统，客户机操作系统可以随意进行安装，公司购买服务器后经常使用平台虚拟化，模拟出多台服务器同时运行<br><img src="https://img-blog.csdnimg.cn/20200307215209611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Hypervisor"><a href="#Hypervisor" class="headerlink" title="Hypervisor"></a>Hypervisor</h2><p>Hypervisor是一种运行在物理服务器和操作系统之间的中间软件层，可允许多个操作系统和应用共享一套基础物理硬件，因此也可以看作是虚拟环境中的“元”操作系统，他可以协调访问服务器上的所有的物理设备和虚拟机，也叫虚拟机监视器。Hypervisor是所有虚拟化技术的核心。当服务器启动并执行Hypervisor时，他会给每一台虚拟机分配适量的内存、CPU、网络和磁盘，并加载所有虚拟机的客户操作系统。常见的产品有Vmware、KVM、Xen等。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟化 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud笔记 | 第一篇：服务注册与发现（Eureka）</title>
      <link href="/2020/06/21/spring/springcloud/springcloud-xue-xi-bi-ji-liu-config-fen-bu-shi-pei-zhi-zhong-xin/"/>
      <url>/2020/06/21/spring/springcloud/springcloud-xue-xi-bi-ji-liu-config-fen-bu-shi-pei-zhi-zhong-xin/</url>
      
        <content type="html"><![CDATA[<h2 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h2><h3 id="1-服务治理"><a href="#1-服务治理" class="headerlink" title="1.服务治理"></a>1.服务治理</h3><p>  SpringCloud封装了Netflix公司开发的Eureka模块来实现服务治理<br>  在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册</p><h3 id="2-服务注册"><a href="#2-服务注册" class="headerlink" title="2.服务注册"></a>2.服务注册</h3><h2 id="创建一个maven主工程"><a href="#创建一个maven主工程" class="headerlink" title="创建一个maven主工程"></a>创建一个maven主工程</h2><h3 id="1-引入pom文件"><a href="#1-引入pom文件" class="headerlink" title="1.引入pom文件"></a>1.引入pom文件</h3><p>在pom文件中引入如下依赖,spring Boot版本为2.2.2.RELEASE，Spring Cloud版本为Hoxton.SR1（该版本要求jdk必须为1.8以上）。这个pom文件作为父pom文件，起到依赖版本控制的作用，其他module工程继承该pom。这一系列文章全部采用这种模式，其他文章的pom跟这个pom一样。再次说明一下，以<br>后不再重复引入。代码如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.wangmx.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 统一管理jar包版本 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">></span></span>1.16.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">></span></span>1.1.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.boot.version</span><span class="token punctuation">></span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.boot.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version。如果某个子项目需要另外的一个版本，只需要声明version即可。  --></span>    <span class="token comment" spellcheck="true">&lt;!-- dependencyManagement中定义的只是依赖的声明，并不实现引入，因此子项目需要显式的声明需要用的依赖。--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--spring boot 2.2.2--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--spring cloud Hoxton.SR1--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Hoxton.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--spring cloud alibaba 2.1.0.RELEASE--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${druid.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis.spring.boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addResources</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addResources</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h2 id="创建Eureka服务注册中心"><a href="#创建Eureka服务注册中心" class="headerlink" title="创建Eureka服务注册中心"></a>创建Eureka服务注册中心</h2><h3 id="新建module"><a href="#新建module" class="headerlink" title="新建module"></a>新建module</h3><p>右键项目–&gt; New –&gt; Module </p><img src="https://image.wangmx.cn/images/Spring/SpringCloud/10001.png"><p>可以选择Maven创建，也可以选择Spring Initializr创建</p><h3 id="引入pom文件"><a href="#引入pom文件" class="headerlink" title="引入pom文件"></a>引入pom文件</h3><p>创建完后的工程，其pom.xml继承了父pom文件，并引入spring-cloud-starter-netflix-eureka-server的依赖，代码如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.timo.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.wangmx.eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-eureka-server7001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h3 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h3><p>在resources目录下新增文件application.yml</p><pre class=" language-yml"><code class="language-yml">server:  port: 7001spring:  application:    name: eurka-server7001eureka:  instance:    hostname: localhost  #eureka服务端的实例名字  client:    register-with-eureka: false    #表识不向注册中心注册自己    fetch-registry: false   #表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务    service-url:      #设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/    </code></pre><p>通过eureka.client.registerWithEureka：false和fetchRegistry：false来表明自己是一个eureka server.</p><h3 id="Eureka启动类"><a href="#Eureka启动类" class="headerlink" title="Eureka启动类"></a>Eureka启动类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wangmx<span class="token punctuation">.</span>eureka<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>server<span class="token punctuation">.</span>EnableEurekaServer<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EurekaApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动主程序，至此，一个Eureka服务注册中心创建完成。<br>eureka server是有界面的，启动工程,打开浏览器访问：<a href="http://localhost:7001,界面如下：">http://localhost:7001,界面如下：</a></p><img src="https://image.wangmx.cn/images/Spring/SpringCloud/10002.png"><blockquote><p>因为没有注册服务。所以显示 No application available 表示没有服务被发现 </p></blockquote><h2 id="三、创建一个服务提供者-eureka-client"><a href="#三、创建一个服务提供者-eureka-client" class="headerlink" title="三、创建一个服务提供者 (eureka client)"></a>三、创建一个服务提供者 (eureka client)</h2><p>当client向server注册时，它会提供一些元数据，例如主机和端口，URL，主页等。Eureka server 从每个client实例接收心跳消息。 如果心跳超时，则通常将该实例从注册server中删除。</p><h3 id="1-新增一个module-cloud-eureka-client8001"><a href="#1-新增一个module-cloud-eureka-client8001" class="headerlink" title="1.新增一个module(cloud-eureka-client8001)"></a>1.新增一个module(cloud-eureka-client8001)</h3><h3 id="2-创建过程同server类似-创建完pom-xml如下："><a href="#2-创建过程同server类似-创建完pom-xml如下：" class="headerlink" title="2.创建过程同server类似,创建完pom.xml如下："></a>2.创建过程同server类似,创建完pom.xml如下：</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.wangmx.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-eureka-client8001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--加入eureka-client依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h3 id="3-新增yml配置文件"><a href="#3-新增yml配置文件" class="headerlink" title="3.新增yml配置文件"></a>3.新增yml配置文件</h3><pre class=" language-yml"><code class="language-yml">server:  port: 8001spring:  application:    name: cloud-eureka-client8001eureka:  client:    register-with-eureka: true    fetchRegistry: true    service-url:      defaultZone: http://localhost:7001/eureka  instance:    instance-id: client8001    prefer-ip-address: true</code></pre><p>注：需要指明唯一的spring.application.name,这个很重要，这在以后的服务与服务之间相互调用一般都是根据这个name 。</p><h3 id="4-主启动类"><a href="#4-主启动类" class="headerlink" title="4.主启动类"></a>4.主启动类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wangmx<span class="token punctuation">.</span>eureka<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>EnableEurekaClient<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaClientApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EurekaClientApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动7001,再启动8001服务，访问localhost:7001</p><img src="https://image.wangmx.cn/images/Spring/SpringCloud/10003.png"><p>发现服务注册到注册中心，并且服务名就是我们在配置文件中定义的名称</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud：(一)服务注册与发现</title>
      <link href="/2020/06/20/spring/springcloud/springcloud-yi-fu-wu-zhu-ce-yu-fa-xian/"/>
      <url>/2020/06/20/spring/springcloud/springcloud-yi-fu-wu-zhu-ce-yu-fa-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="创建一个maven主工程"><a href="#创建一个maven主工程" class="headerlink" title="创建一个maven主工程"></a>创建一个maven主工程</h2><h3 id="1-引入pom文件"><a href="#1-引入pom文件" class="headerlink" title="1.引入pom文件"></a>1.引入pom文件</h3><p>在pom文件中引入如下依赖,spring Boot版本为2.2.2.RELEASE，Spring Cloud版本为Hoxton.SR1（该版本要求jdk必须为1.8以上）。这个pom文件作为父pom文件，起到依赖版本控制的作用，其他module工程继承该pom。这一系列文章全部采用这种模式，其他文章的pom跟这个pom一样。再次说明一下，以<br>后不再重复引入。代码如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.wangmx.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 统一管理jar包版本 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">></span></span>1.16.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">></span></span>1.1.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.boot.version</span><span class="token punctuation">></span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.boot.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version。如果某个子项目需要另外的一个版本，只需要声明version即可。  --></span>    <span class="token comment" spellcheck="true">&lt;!-- dependencyManagement中定义的只是依赖的声明，并不实现引入，因此子项目需要显式的声明需要用的依赖。--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--spring boot 2.2.2--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--spring cloud Hoxton.SR1--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Hoxton.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--spring cloud alibaba 2.1.0.RELEASE--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${druid.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis.spring.boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addResources</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addResources</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h2 id="创建Eureka服务注册中心"><a href="#创建Eureka服务注册中心" class="headerlink" title="创建Eureka服务注册中心"></a>创建Eureka服务注册中心</h2><h3 id="新建module"><a href="#新建module" class="headerlink" title="新建module"></a>新建module</h3><p>右键项目–&gt; New –&gt; Module </p><img src="https://image.wangmx.cn/images/Spring/SpingCloud/10001.png"><p>可以选择Maven创建，也可以选择Spring Initializr创建</p><h3 id="引入pom文件"><a href="#引入pom文件" class="headerlink" title="引入pom文件"></a>引入pom文件</h3><p>创建完后的工程，其pom.xml继承了父pom文件，并引入spring-cloud-starter-netflix-eureka-server的依赖，代码如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.timo.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.wangmx.eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-eureka-server7001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h3 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h3><p>在resources目录下新增文件application.yml</p><pre class=" language-yml"><code class="language-yml">server:  port: 7001spring:  application:    name: eurka-server7001eureka:  instance:    hostname: localhost  #eureka服务端的实例名字  client:    register-with-eureka: false    #表识不向注册中心注册自己    fetch-registry: false   #表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务    service-url:      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/    #设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot入门到精通：（二）启动原理解析</title>
      <link href="/2020/06/14/spring/springboot/springboot-ru-men-dao-jing-tong-er-qi-dong-yuan-li-jie-xi/"/>
      <url>/2020/06/14/spring/springboot/springboot-ru-men-dao-jing-tong-er-qi-dong-yuan-li-jie-xi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20191013195748147.png" alt="在这里插入图片描述"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面见识了SpringBoot为我们做的自动配置，非常方便快捷，相比于之前繁琐的配置文件，简直不要太优秀，让我们不禁好奇，到底是怎么做到的呢，让我们一起来探究一下</p><hr><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>我们开发任何一个Spring Boot项目，都会用到如下的启动类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从上面代码可以看出，Annotation定义（@SpringBootApplication）和类定义（SpringApplication.run）最为耀眼，所以要揭开SpringBoot的神秘面纱，我们要从这两位开始就可以了。</p><p>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；<br>看一下他的源码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span></code></pre><p>SpringBootApplication是一个组合注解，虽然定义使用了多个Annotation进行了原信息标注，但重要的只有三个Annotation：</p><ul><li>@SpringBootConfiguration</li><li>@EnableAutoConfiguration</li><li>@ComponentScan</li></ul><p>所以，如果我们使用如下的SpringBoot启动类，整个SpringBoot应用依然可以与之前的启动类功能对等：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>每次写这3个比较累，所以写一个@SpringBootApplication方便点。接下来分别介绍这3个Annotation。</p><h3 id="1-SpringBootConfiguration-Spring-Boot的配置类；"><a href="#1-SpringBootConfiguration-Spring-Boot的配置类；" class="headerlink" title="1. @SpringBootConfiguration:Spring Boot的配置类；"></a>1. @<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</h3><p>​        标注在某个类上，表示这是一个Spring Boot的配置类；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>​@Configuration对我们来说不陌生，它就是JavaConfig形式的Spring Ioc容器的配置类使用的那个@Configuration，SpringBoot社区推荐使用基于JavaConfig的配置形式，所以，这里的启动类标注了@Configuration之后，本身其实也是一个IoC容器的配置类。配置类也是容器中的一个组件；@Component</p><p>举几个简单例子回顾下，XML跟config配置方式的区别：</p><p>表达形式层面<br>基于XML配置的方式是这样：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class="token punctuation">"</span></span>       <span class="token attr-name">default-lazy-init</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--bean定义--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>而基于JavaConfig的配置方式是这样：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MockConfiguration</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//bean定义</span><span class="token punctuation">}</span></code></pre><p>任何一个标注了@Configuration的Java类定义都是一个JavaConfig配置类。</p><p>注册bean定义层面<br>基于XML的配置形式是这样：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>..UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>而基于JavaConfig的配置形式是这样的：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> UserService <span class="token function">userService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>任何一个标注了@Bean的方法，其返回值将作为一个bean定义注册到Spring的IoC容器，方法名将默认成该bean定义的id。</p><p>表达依赖注入关系层面<br>为了表达bean与bean之间的依赖关系，在XML形式中一般是这样：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mockService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>..MockServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;propery name ="dependencyService" ref="dependencyService" /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dependencyService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DependencyServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>而基于JavaConfig的配置形式是这样的：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> UserService <span class="token function">userService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token function">dependencyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DependencyService <span class="token function">dependencyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DependencyServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果一个bean的定义依赖其他bean,则直接调用对应的JavaConfig类中依赖bean的创建方法就可以了。</p><hr><h3 id="2-ComponentScan：开启自动配置功能；"><a href="#2-ComponentScan：开启自动配置功能；" class="headerlink" title="2. @ComponentScan：开启自动配置功能；"></a>2. @<strong>ComponentScan</strong>：开启自动配置功能；</h3><p>@ComponentScan这个注解在Spring中很重要，它对应XML配置中的元素，@ComponentScan的功能其实就是自动扫描并加载符合条件的组件（比如@Component和@Repository等）或者bean定义，最终将这些bean定义加载到IoC容器中。</p><p>我们可以通过basePackages等属性来细粒度的定制@ComponentScan自动扫描的范围，如果不指定，则默认Spring框架实现会从声明@ComponentScan所在类的package进行扫描。</p><p><strong>注</strong>：所以SpringBoot的启动类最好是放在root package下，因为默认不指定basePackages。</p><h3 id="3-EnableAutoConfiguration：开启自动配置功能；"><a href="#3-EnableAutoConfiguration：开启自动配置功能；" class="headerlink" title="3. @EnableAutoConfiguration：开启自动配置功能；"></a>3. @<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</h3><p>SpringBoot之所以可以零配置，其核心就是​@EnableAutoConfiguration这个Annotation，以前我们需要配置的东西，Spring Boot帮我们自动配置；而@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；<br>大家是否还记得Spring框架提供的各种名字为@Enable开头的Annotation定义？比如@EnableScheduling、@EnableCaching、@EnableMBeanExport等，@EnableAutoConfiguration的理念和做事方式其实一脉相承<br>简单概括一下就是，借助<strong>@Import的支持，收集和注册特定场景相关的bean定义</strong>。<br>@EnableScheduling是通过@Import将Spring调度框架相关的bean定义都加载到IoC容器。<br>@EnableMBeanExport是通过@Import将JMX相关的bean定义加载到IoC容器。<br>而@EnableAutoConfiguration也是借助@Import的帮助，将所有符合自动配置条件的bean定义加载到IoC容器，仅此而已！</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigurationPackage</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>EnableAutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">{</span></code></pre><p>​          @<strong>AutoConfigurationPackage</strong>：自动配置包</p><p>​        @<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p><p>​        Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class==将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；==</p><p>​        @<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p><p>​        给容器中导入组件？</p><p>​        <strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p><p>​        将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p><p>​        会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；<br><img src="https://img-blog.csdnimg.cn/2019101419355125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；<br>借助于Spring框架原有的一个工具类：SpringFactoriesLoader的支持，SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；以前我们需要自己配置的东西，自动配置类都帮我们；</p><p><img src="https://img-blog.csdnimg.cn/20191014200657927.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191014200702151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191014200723840.png" alt="在这里插入图片描述"><br>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure中</p><p><img src="https://img-blog.csdnimg.cn/20191014195708246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          Spring
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot入门到精通：（一）Hello World</title>
      <link href="/2020/06/14/spring/springboot/springboot-ru-men-dao-jing-tong-yi-hello-world/"/>
      <url>/2020/06/14/spring/springboot/springboot-ru-men-dao-jing-tong-yi-hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20191013182144841.png" alt="在这里插入图片描述"></p><h2 id="Spring-Boot-概述"><a href="#Spring-Boot-概述" class="headerlink" title="Spring Boot 概述"></a>Spring Boot 概述</h2><blockquote><p><strong>Build Anything with Spring Boot：</strong><br>Spring Boot is the starting point for building all Spring-based applications. Spring Boot is designed to get you up and running as quickly as possible, with minimal upfront configuration of Spring.</p></blockquote><p>上面是引自官网的一段话，大概是说： Spring Boot 是所有基于 Spring 开发的项目的起点。Spring Boot 的设计是为了让你尽可能快的跑起来 Spring 应用程序并且尽可能减少你的配置文件。<br><img src="https://img-blog.csdnimg.cn/20191014202643364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在SpringBoot官方网站上，介绍了SpringBoot的特点<br>就是快速简洁的创建独立的Spring应用程序，并且完全不需要任何配置文件<br>它使用 “习惯优于配置” （项目中存在大量的配置，此外还内置一个习惯性的配置，让你无须）的理念让你的项目快速运行起来。<br>它并不是什么新的框架，而是默认配置了很多框架的使用方式，就像 Maven 整合了所有的 jar 包一样，Spring Boot 整合了所有框架</p><h2 id="SpringBoot快速搭建"><a href="#SpringBoot快速搭建" class="headerlink" title="SpringBoot快速搭建"></a>SpringBoot快速搭建</h2><p>第一步：新建项目<br>选择 Spring Initializr ，然后选择默认的 url 点击【Next】：<br><img src="https://img-blog.csdnimg.cn/20191013182424420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后修改一下项目的信息：<br><img src="https://img-blog.csdnimg.cn/2019101318255057.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>勾选项目需要的模块<br><img src="https://img-blog.csdnimg.cn/20191013182649432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择项目路径，修改项目名，点击Finish<br><img src="https://img-blog.csdnimg.cn/20191013182748525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>至此，项目创建完成，项目结构如下<br><img src="https://img-blog.csdnimg.cn/20191013183132126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>DemoApplication： 一个带有 main() 方法的类，用于启动应用程序</li><li>DemoApplicationTests：一个空的 Junit 测试了，它加载了一个使用 Spring Boot 字典配置功能的  Spring 应用程序上下文</li><li>resource文件夹目录结构<ul><li>static：用于存储静态文件（css,js等）</li><li>templates：用于存放模板页面</li><li>application.properties：SpringBoot应用的配置文件，可以用来修改一些默认配置</li></ul></li><li>pom.xml： Maven 构建说明文件</li></ul><p>第一步：Hello World<br>在【cn.example.demo】包下新建一个package【controller】，新建类【HelloWorldController】：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello World !!!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>第三步：利用 IDEA 启动 Spring Boot<br>我们回到 DemoApplication 这个类中，然后右键点击运行：<br><img src="https://img-blog.csdnimg.cn/2019101318443227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><strong>注意</strong>：我们之所以在上面的项目中没有手动的去配置 Tomcat 服务器，是因为 Spring Boot 内置了 Tomcat<br>启动成功<br><img src="https://img-blog.csdnimg.cn/2019101318460481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到我们的 Tomcat 运行在 8080 端口，我们来访问 “/hello” 地址试一下：<br><img src="https://img-blog.csdnimg.cn/20191013184646707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>至此，一个SpringBoot的HelloWorld完成</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门：（二）Docker介绍</title>
      <link href="/2020/06/14/docker/docker-ru-men-er-docker-jie-shao/"/>
      <url>/2020/06/14/docker/docker-ru-men-er-docker-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker概念"><a href="#Docker概念" class="headerlink" title="Docker概念"></a>Docker概念</h2><blockquote><p>Docker is a platform for developers and sysadmins to build, run, and share applications with containers. The use of containers to deploy applications is called containerization. Containers are not new, but their use for easily deploying applications is.</p></blockquote><p>上面是<a href="https://docs.docker.com/get-started/" target="_blank" rel="noopener">Docker官方文档</a>中给出的定义，翻译之后就是：<br>Docker是一个供开发人员和系统管理员使用容器构建、运行和共享应用程序的平台。使用容器部署应用程序称为容器化。容器并不新鲜，但它们用于轻松部署应用程序却很新鲜。</p><p>因此，要了解docker是什么，首先我们要理解<strong>容器</strong>的概念，而理解容器，我们还要了解<strong>容器</strong>和<strong>虚拟机</strong>的区别</p><h2 id="容器和虚拟机"><a href="#容器和虚拟机" class="headerlink" title="容器和虚拟机"></a>容器和虚拟机</h2><p>上文中我们介绍了虚拟化技术，了解了虚拟化架构之后，我们就可以很清楚的区分<strong>容器</strong>和<strong>虚拟机</strong>的概念<br>我们用的传统虚拟机如 VMware ， VisualBox 之类的是全虚拟化架构，需要模拟整台机器包括硬件，每台虚拟机都需要有自己的操作系统，虚拟机一旦被开启，预分配给它的资源将全部被占用。每一台虚拟机包括应用，必要的二进制和库，以及一个完整的用户操作系统。</p><p>而容器技术是基于操作系统层的虚拟化技术，容器和我们的宿主机共享硬件资源及操作系统，可以实现资源的动态分配。容器包含应用和其所有的依赖包，但是与其他容器共享内核。容器在宿主机操作系统中，在用户空间以分离的进程运行。</p><p>容器技术是实现操作系统虚拟化的一种途径，可以让您在资源受到隔离的进程中运行应用程序及其依赖关系。通过使用容器，我们可以轻松打包应用程序的代码、配置和依赖关系，将其变成容易使用的构建块，从而实现环境一致性、运营效率、开发人员生产力和版本控制等诸多目标。容器可以帮助保证应用程序快速、可靠、一致地部署，其间不受部署环境的影响。容器还赋予我们对资源更多的精细化控制能力，让我们的基础设施效率更高。通过下面这幅图我们可以很直观的反映出这两者的区别所在<br><img src="https://img-blog.csdnimg.cn/20200307215606288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>容器的优点：</p><ul><li><p><strong>灵活</strong>:即使是最复杂的应用程序也可以被封装。</p></li><li><p><strong>轻量级</strong>:容器利用和共享主机内核，使它们在系统资源方面比虚拟机更高效。</p></li><li><p><strong>可移植性</strong>:您可以在本地构建、部署到云，并在任何地方运行。</p></li><li><p><strong>松散耦合</strong>:容器是高度自给自足和封装的，允许您替换或升级一个容器而不破坏其他容器。</p></li><li><p><strong>可伸缩</strong>:您可以增加并自动跨数据中心分发容器副本。</p></li><li><p><strong>安全</strong>:容器对进程应用主动约束和隔离，而不需要用户进行任何配置。</p></li></ul><p>我们可以从下面这张表格很清楚地看到容器相比于传统虚拟机的特性的优势所在：<br>|特性  |容器  | 虚拟机|<br>|–|–|–|<br>|启动|    秒级    |分钟级|<br>|硬盘使用    |一般为MB|    一般为GB|<br>|性能|    接近原生|    弱于|<br>|系统支持量|    单机支持上千个容器|    一般是几十个|</p><h2 id="Docker定位"><a href="#Docker定位" class="headerlink" title="Docker定位"></a>Docker定位</h2><p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离，相当于是在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。<br>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker ，就不用担心环境问题。<br>总体来说， Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p><p>Docker相比于传统虚拟化方式具有更多的优势：</p><ul><li>docker 启动快速属于秒级别。虚拟机通常需要几分钟去启动</li><li>docker 需要的资源更少， docker 在操作系统级别进行虚拟化， docker 容器和内核交互，几乎没有性能损耗，性能优于通过 Hypervisor 层与内核层的虚拟化</li><li>docker 更轻量， docker 的架构可以共用一个内核与共享应用程序库，所占内存极小。同样的硬件环境，  Docker 运行的镜像数远多于虚拟机数量，对系统的利用率非常高<br>与虚拟机相比， docker 隔离性更弱， docker 属于进程之间的隔离，虚拟机可实现系统级别隔离</li><li>安全性： docker 的安全性也更弱。 Docker 的租户 root 和宿主机 root 等同，一旦容器内的用户从普通用户权限提升为root权限，它就直接具备了宿主机的root权限，进而可进行无限制的操作。虚拟机租户 root 权限和宿主机的 root 虚拟机权限是分离的，并且虚拟机利用如 Intel 的 VT-d 和 VT-x 的 ring-1 硬件隔离技术，这种隔离技术可以防止虚拟机突破和彼此交互，而容器至今还没有任何形式的硬件隔离，这使得容器容易受到攻击</li><li>可管理性： docker 的集中化管理工具还不算成熟。各种虚拟化技术都有成熟的管理工具，例如 VMware vCenter 提供完备的虚拟机管理能力</li><li>高可用和可恢复性： docker 对业务的高可用支持是通过快速重新部署实现的。虚拟化具备负载均衡，高可用，容错，迁移和数据保护等经过生产实践检验的成熟保障机制， VMware 可承诺虚拟机 99.999% 高可用，保证业务连续性</li><li>快速创建、删除：虚拟化创建是分钟级别的， Docker 容器创建是秒级别的， Docker 的快速迭代性，决定了无论是开发、测试、部署都可以节约大量时间<br>交付、部署：虚拟机可以通过镜像实现环境交付的一致性，但镜像分发无法体系化。 Docker 在 Dockerfile 中记录了容器构建过程，可在集群中实现快速分发和快速部署</li></ul><h2 id="Docker三要素"><a href="#Docker三要素" class="headerlink" title="Docker三要素"></a>Docker三要素</h2><p><img src="https://img-blog.csdnimg.cn/2020030822421362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>从上图我们可以看到，Docker 中包括三个基本的要素：</p><ol><li>Repository(仓库)</li><li>Image(镜像)</li><li>Container(容器)</li></ol><h3 id="Repository（仓库）"><a href="#Repository（仓库）" class="headerlink" title="Repository（仓库）"></a>Repository（仓库）</h3><p>仓库的概念很好理解，Docker 仓库是集中存放镜像文件的场所。如果使用了git和github就很容易理解docker的仓库概念。docker仓库概念和git类似。</p><p>docker提供了一个注册服务器（register）来保存多个仓库，每个仓库又可以包含多个具备不同tag的镜像，</p><p>docker运作中使用的默认仓库是<a href="https://hub.docker.com/" target="_blank" rel="noopener">docker hub</a>公共仓库。</p><p>仓库支持的操作类似git，当用户创建了自己的镜像之后就可以使用push命令将它上传到共有或者私有的仓库。这样下次再另外一台机器上使用这个镜像的时候只需要从仓库里面pull下来就可以了。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本 。我们可以通过&lt;仓库名&gt;:&lt;标签&gt;的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签.。</p><h3 id="Image-镜像-和Container-容器"><a href="#Image-镜像-和Container-容器" class="headerlink" title="Image(镜像)和Container(容器)"></a>Image(镜像)和Container(容器)</h3><p><img src="https://img-blog.csdnimg.cn/20200308223245737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fhd214MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>Fundamentally, a container is nothing but a running process, with some added encapsulation features applied to it in order to keep it isolated from the host and from other containers. One of the most important aspects of container isolation is that each container interacts with its own private filesystem; this filesystem is provided by a Docker image. An image includes everything needed to run an application - the code or binary, runtimes, dependencies, and any other filesystem objects required.<br>容器只是一个正在运行的进程，为了使它与主机和其他容器隔离，在其上应用了一些附加的封装特性。容器隔离最重要的方面之一是每个容器都与自己的私有文件系统进行交互;此文件系统由Docker镜像提供。镜像包含运行应用程序所需的所有东西——代码或二进制文件、运行时、依赖项以及所需的任何其他文件系统对象。</p></blockquote><p>镜像是文件, 容器是进程。 容器是基于镜像创建的, 即容器中的进程依赖于镜像中的文件, 这里的文件包括进程运行所需要的可执行文件， 依赖软件， 库文件， 配置文件等等…<br>相对于镜像来说容器是动态的，容器的定义和镜像几乎一样，唯一的区别是容器在启动的时候创建了一层可写层次作为最上层。（   docker create &lt;image -id &gt; ：为指定的镜像添加一个可读写层，构成一个新的容器；）<br>==注：容器是由镜像实例化而来，这和我们学习的面向对象的概念十分相似，我们可以把镜像看作类，把容器看作类实例化后的对象。==<br>docker 的镜像概念类似虚拟机的镜像。是一个只读的模板，一个独立的文件系统，带有创建Docker容器的指令，可以用来创建新的容器。（  docker create &lt;image -id &gt; ：为指定的镜像添加一个可读写层，构成一个新的容器；）例如：一个镜像可以包含一个完整的ubuntu操作系统环境，里面仅安装了mysql或用户需要的其他应用程序。<br>docker镜像实际上是由一层一层的系统文件组成，这种层级的文件系统被称为UnionFS( Union file system  统一文件系统)，镜像可以基于dockerfile构建，dockerfile是一个描述文件，里面包含了若干条密令，每条命令都会对基础文件系统创建新的层次结构。</p><p>docker提供了一个很简单的机制来创建镜像或更新现有的镜像。用户甚至可以从其他人那里下载一个已经做好的镜像直接使用。（镜像是只读的，可以理解为静态文件）</p><p>docker利用容器来运行应用：docker容器是由docker镜像创建的运行实例。docker容器类似虚拟机，可以执行包含启动，停止，删除等。每个容器间是相互隔离的。容器中会运行特定的运用，包含特定应用的代码及所需的依赖文件。==可以把容器看作一个简易版的linux环境（包含root用户权限，进程空间，用户空间和网络空间等）和运行在其中的应用程序==。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
